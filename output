$ git clone git://git.kernel.org/pub/scm/git/git.gitFirst-Time Git Setup
$ git config --global user.name "John Doe"$ git config --global user.email johndoe@example.comAgain, you need to do this only once if you pass the 
$ git config --global core.editor emacsCHAPTER 1: Getting Started
$ git config --global core.editor "C:/Program Files/Notepad++/notepad++.exe -multiInst -nosession"On a x64 system
$ git config --global core.editor "C:/Program Files (x86)/Notepad++/notepad++.exe -multiInst -nosession"Vim, Emacs and Notepad++ are popular text editors often used by devel-opers on Unix based systems like Linux and OS X or a Windows system. Ifyou are not familiar with either of these editors, you may need to searchfor specific instructions for how to set up your favorite editor with Git.
$ git config --listuser.name=John Doeuser.email=johndoe@example.comcolor.status=autocolor.branch=autocolor.interactive=autocolor.diff=auto...You may see keys more than once, because Git reads the same key from 
$ git config user.nameJohn DoeGetting HelpIf you ever need help while using Git, there are three ways to get the manual
$ git help <verb>$ git <verb> --help$ man git-<verb>For example, you can get the manpage help for the config command by run-
ning$ git help configThese commands are nice because you can access them anywhere, even 
$ git initThis creates a new subdirectory named 
git commit:$ git add *.c$ git add LICENSE$ git commit -m initial project versionWell go over what these commands do in just a minute. At this point, you
$ git clone https://github.com/libgit2/libgit2That creates a directory named libgit2, initializes a 
$ git clone https://github.com/libgit2/libgit2 mylibgitThat command does the same thing as the previous one, but the target di-
$ git statusOn branch masternothing to commit, working directory cleanThis means you have a clean working directory  in other words, there are no
so:$ echo My Project > README$ git statusOn branch masterUntracked files:  (use "git add <file>..." to include in what will be committed)    READMEnothing added to commit but untracked files present (use "git add" to track)You can see that your new README file is untracked, because its under the
$ git add READMEIf you run your status command again, you can see that your README file is
$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    new file:   READMEYou can tell that its staged because its under the Changes to be commit-
$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    new file:   READMEChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)Recording Changes to the Repository
$ git add CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    new file:   README    modified:   CONTRIBUTING.mdBoth files are staged and will go into your next commit. At this point, sup-
$ vim CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    new file:   README    modified:   CONTRIBUTING.mdChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)    modified:   CONTRIBUTING.mdWhat the heck? Now 
$ git add CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    new file:   README    modified:   CONTRIBUTING.mdShort Status
$ git status -s M READMEMM RakefileA  lib/git.rbM  lib/simplegit.rb?? LICENSE.txtNew files that arent tracked have a 
$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    modified:   READMEChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)    modified:   CONTRIBUTING.mdRecording Changes to the Repository
$ git diffdiff --git a/CONTRIBUTING.md b/CONTRIBUTING.mdindex 8ebb991..643e24f 100644--- a/CONTRIBUTING.md+++ b/CONTRIBUTING.md@@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why youre contributing in the first place, youre less likely to get feedback and have your change-merged in.+merged in. Also, split your changes into comprehensive chunks if your patch is+longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that itsThat command compares what is in your working directory with what is in
$ git diff --stageddiff --git a/README b/READMEnew file mode 100644index 0000000..03902a1--- /dev/null+++ b/README@@ -0,0 +1 @@+My ProjectIts important to note that 
$ git add CONTRIBUTING.md$ echo # test line >> CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    modified:   CONTRIBUTING.mdChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)    modified:   CONTRIBUTING.mdNow you can use 
$ git diffdiff --git a/CONTRIBUTING.md b/CONTRIBUTING.mdindex 643e24f..87f08c8 100644--- a/CONTRIBUTING.md+++ b/CONTRIBUTING.md@@ -119,3 +119,4 @@ at the ## Starter Projects See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).+# test lineand git diff --cached to see what youve staged so far (
$ git diff --cacheddiff --git a/CONTRIBUTING.md b/CONTRIBUTING.mdindex 8ebb991..643e24f 100644--- a/CONTRIBUTING.md+++ b/CONTRIBUTING.md@@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why youre contributing in the first place, youre less likely to get feedback and have your change-merged in.+merged in. Also, split your changes into comprehensive chunks if your patch is+longer than a dozen lines.Recording Changes to the Repository
git commit:$ git commitDoing so launches your editor of choice. (This is set by your shells 
$ git commit -m "Story 182: Fix benchmarks for speed"[master 463dc4f] Story 182: Fix benchmarks for speed 2 files changed, 2 insertions(+) create mode 100644 READMENow youve created your first commit! You can see that the commit has giv-
$ git statusOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)Recording Changes to the Repository
    modified:   CONTRIBUTING.mdno changes added to commit (use "git add" and/or "git commit -a")$ git commit -a -m added new benchmarks[master 83e38c7] added new benchmarks 1 file changed, 5 insertions(+), 0 deletions(-)Notice how you dont have to run 
$ rm PROJECTS.md$ git statusOn branch masterYour branch is up-to-date with origin/master.Changes not staged for commit:  (use "git add/rm <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)        deleted:    PROJECTS.mdno changes added to commit (use "git add" and/or "git commit -a")Then, if you run 
$ git rm PROJECTS.mdrm PROJECTS.md$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)CHAPTER 2: Git Basics
use the --cached option:$ git rm --cached READMEYou can pass files, directories, and file-glob patterns to the 
$ git rm log/\*.logNote the backslash (
$ git rm \*~This command removes all files that end with 
$ git mv file_from file_toand it works fine. In fact, if you run something like this and look at the sta-
$ git mv README.md README$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    renamed:    README.md -> READMEHowever, this is equivalent to running something like this:
$ mv README.md README$ git rm README.md$ git add READMEGit figures out that its a rename implicitly, so it doesnt matter if you re-
$ git clone https://github.com/schacon/simplegit-progitCHAPTER 2: Git Basics
$ git logcommit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon <schacon@gee-mail.com>Date:   Mon Mar 17 21:52:11 2008 -0700    changed the version numbercommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: Scott Chacon <schacon@gee-mail.com>Date:   Sat Mar 15 16:40:33 2008 -0700    removed unnecessary testcommit a11bef06a3f659402fe7563abf99ad00de2209e6Author: Scott Chacon <schacon@gee-mail.com>Date:   Sat Mar 15 10:31:28 2008 -0700    first commitBy default, with no arguments, 
$ git log -p -2commit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon <schacon@gee-mail.com>Date:   Mon Mar 17 21:52:11 2008 -0700    changed the version numberdiff --git a/Rakefile b/Rakefileindex a874b73..8f94139 100644--- a/Rakefile+++ b/RakefileViewing the Commit History
--stat option:$ git log --statcommit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon <schacon@gee-mail.com>Date:   Mon Mar 17 21:52:11 2008 -0700    changed the version number Rakefile | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)CHAPTER 2: Git Basics
$ git log --pretty=onelineca82a6dff817ec66f44342007202690a93763949 changed the version number085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary testa11bef06a3f659402fe7563abf99ad00de2209e6 first commitThe most interesting option is 
$ git log --pretty=format:"%h - %an, %ar : %s"ca82a6d - Scott Chacon, 6 years ago : changed the version numberViewing the Commit History
$ git log --pretty=format:"%h %s" --graph* 2d3acf9 ignore errors from SIGCHLD on trap*  5e3ee11 Merge branch master of git://github.com/dustin/grit|\| * 420eac9 Added a method for getting the current branch.* | 30e367c timeout code and tests* | 5a09431 add timeout protection to grit* | e1193f8 support for heads with slashes in them|/* d6016bc require time for xmlschema*  11d191e Merge branch defunkt into localThis type of output will become more interesting as we go through branch-
$ git log --since=2.weeksThis command works with lots of formats  you can specify a specific date
$ git log -Sfunction_nameThe last really useful option to pass to 
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \   --before="2008-11-01" --no-merges -- t/5610e3b - Fix testcase failure when extended attributes are in useacd3b9e - Enhance hold_lock_file_for_{update,append}() APIf563754 - demonstrate breakage of detached checkout with symbolic link HEADd1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths51a94af - Fix "checkout --track -b newbranch" on detached HEADb0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branchOf the nearly 40,000 commits in the Git source code history, this command
--amend option:$ git commit --amendThis command takes your staging area and uses it for the commit. If youve
this:$ git commit -m initial commit$ git add forgotten_file$ git commit --amendYou end up with a single commit  the second commit replaces the results of
$ git add *$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)CHAPTER 2: Git Basics
CONTRI-BUTING.md file:$ git reset HEAD CONTRIBUTING.mdUnstaged changes after reset:M CONTRIBUTING.md
$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    renamed:    README.md -> READMEChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)    modified:   CONTRIBUTING.mdThe command is a bit strange, but it works. The 
what it says:$ git checkout -- CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    renamed:    README.md -> READMEYou can see that the changes have been reverted.
$ git clone https://github.com/schacon/ticgitCloning into ticgit...remote: Reusing existing pack: 1857, done.remote: Total 1857 (delta 0), reused 0 (delta 0)Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.Resolving deltas: 100% (772/772), done.Checking connectivity... done.$ cd ticgit$ git remoteoriginYou can also specify 
$ git remote -vorigin https://github.com/schacon/ticgit (fetch)
$ cd grit$ git remote -vbakkdoor  https://github.com/bakkdoor/grit (fetch)bakkdoor  https://github.com/bakkdoor/grit (push)cho45     https://github.com/cho45/grit (fetch)cho45     https://github.com/cho45/grit (push)defunkt   https://github.com/defunkt/grit (fetch)defunkt   https://github.com/defunkt/grit (push)koke      git://github.com/koke/grit.git (fetch)Working with Remotes
git remote add<shortname> <url>:$ git remoteorigin$ git remote add pb https://github.com/paulboone/ticgit$ git remote -vorigin https://github.com/schacon/ticgit (fetch)
git fetch pb:$ git fetch pbremote: Counting objects: 43, done.remote: Compressing objects: 100% (36/36), done.remote: Total 43 (delta 10), reused 31 (delta 5)Unpacking objects: 100% (43/43), done.From https://github.com/paulboone/ticgit * [new branch]      master     -> pb/master * [new branch]      ticgit     -> pb/ticgitPauls master branch is now accessible locally as 
$ git fetch [remote-name]The command goes out to that remote project and pulls down all the data
$ git push origin masterWorking with Remotes
$ git remote show origin* remote origin  Fetch URL: https://github.com/schacon/ticgit  Push  URL: https://github.com/schacon/ticgit  HEAD branch: master  Remote branches:    master                               tracked    dev-branch                           tracked  Local branch configured for git pull:    master merges with remote master  Local ref configured for git push:    master pushes to master (up to date)It lists the URL for the remote repository as well as the tracking branch infor-
git remoteshow:$ git remote show origin* remote origin  URL: https://github.com/my-org/complex-project  Fetch URL: https://github.com/my-org/complex-project  Push  URL: https://github.com/my-org/complex-project  HEAD branch: master  Remote branches:    master                           trackedCHAPTER 2: Git Basics
do so with git remote rename:$ git remote rename pb paul$ git remoteoriginpaulIts worth mentioning that this changes your remote branch names, too.
git remote rm:$ git remote rm paul$ git remoteoriginWorking with Remotes
git tag:$ git tagv0.1v1.3This command lists the tags in alphabetical order; the order in which they
$ git tag -l "v1.8.5*"v1.8.5v1.8.5-rc0v1.8.5-rc1v1.8.5-rc2v1.8.5-rc3v1.8.5.1v1.8.5.2v1.8.5.3v1.8.5.4v1.8.5.5Creating Tags
$ git tag -a v1.4 -m "my version 1.4"$ git tagv0.1v1.3v1.4The -m specifies a tagging message, which is stored with the tag. If you dont
$ git show v1.4tag v1.4Tagger: Ben Straub <ben@straub.cc>Date:   Sat May 3 20:19:12 2014 -0700my version 1.4commit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon <schacon@gee-mail.com>Date:   Mon Mar 17 21:52:11 2008 -0700    changed the version numberThat shows the tagger information, the date the commit was tagged, and the
$ git tag v1.4-lw$ git tagv0.1v1.3v1.4v1.4-lwv1.5This time, if you run 
$ git show v1.4-lwcommit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon <schacon@gee-mail.com>Date:   Mon Mar 17 21:52:11 2008 -0700    changed the version numberTagging Later
$ git log --pretty=oneline15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch experimenta6b4c97498bd301d84096da251c98a07c7723e65 beginning write support0d52aaab4479697da7686c15f77a3d64d9165190 one more thing6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch experiment0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function4682c3261057305bdd616e23b64b0857d832627b added a todo file166ae0c4d3f420721acbb115cc33848dfcc2121a started write support9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo8a5cbc430f1a9c3d00faaeffd07798508422908a updated readmeNow, suppose you forgot to tag the project at v1.2, which was at the upda-
$ git tag -a v1.2 9fceb02CHAPTER 2: Git Basics
$ git tagv0.1v1.2v1.3v1.4v1.4-lwv1.5$ git show v1.2tag v1.2Tagger: Scott Chacon <schacon@gee-mail.com>Date:   Mon Feb 9 15:32:16 2009 -0800version 1.2commit 9fceb02d0ae598e95dc970b74767f19372d61af8Author: Magnus Chacon <mchacon@gee-mail.com>Date:   Sun Apr 27 20:43:35 2008 -0700    updated rakefile...Sharing Tags
git pushorigin [tagname].$ git push origin v1.5Counting objects: 14, done.Delta compression using up to 8 threads.Compressing objects: 100% (12/12), done.Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.Total 14 (delta 3), reused 0 (delta 0)To git@github.com:schacon/simplegit.git * [new tag]         v1.5 -> v1.5If you have a lot of tags that you want to push up at once, you can also use
$ git push origin --tagsCounting objects: 1, done.Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.Total 1 (delta 0), reused 0 (delta 0)To git@github.com:schacon/simplegit.git * [new tag]         v1.4 -> v1.4 * [new tag]         v1.4-lw -> v1.4-lwNow, when someone else clones or pulls from your repository, they will get
gitcheckout -b [branchname] [tagname]:$ git checkout -b version2 v2.0.0Switched to a new branch version2Of course if you do this and do a commit, your 
$ git config --global alias.co checkout$ git config --global alias.br branch$ git config --global alias.ci commit$ git config --global alias.st statusCHAPTER 2: Git Basics
$ git config --global alias.unstage reset HEAD --This makes the following two commands equivalent:
$ git unstage fileA$ git reset HEAD -- fileAThis seems a bit clearer. Its also common to add a 
$ git config --global alias.last log -1 HEADThis way, you can see the last commit easily:
$ git lastcommit 66938dae3329c7aebe598c2246a8e6af90d04646Author: Josh Goebel <dreamer3@example.com>Date:   Tue Aug 26 19:48:51 2008 +0800    test for current head    Signed-off-by: Scott Chacon <schacon@example.com>As you can tell, Git simply replaces the new command with whatever you
gitk:$ git config --global alias.visual !gitkGit Aliases79
$ git add README test.rb LICENSE$ git commit -m The initial commit of my projectWhen you create the commit by running 
$ git branch testingThis creates a new pointer to the same commit youre currently on.
--decorate.$ git log --oneline --decoratef30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface34ac2 Fixed bug #1328 - stack overflow under certain conditions98ca9 The initial commit of my projectYou can see the master and testing branches that are right there next to
$ git checkout testingThis moves 
$ vim test.rb$ git commit -a -m made a changeThis is interesting, because now your 
FIGURE 3-8HEAD moves whenyou checkout$ git checkout masterThat command did two things. It moved the HEAD pointer back to point to
$ vim test.rb$ git commit -a -m made other changesNow your project history has diverged (see 
$ git log --oneline --decorate --graph --all* c2b9e (HEAD, master) made other changes| * 87ab2 (testing) made a change|/* f30ab add feature #32 - ability to add new formats to the* 34ac2 fixed bug #1328 - stack overflow under certain conditions* 98ca9 initial commit of my projectBecause a branch in Git is in actuality a simple file that contains the 40 char-
FIGURE 3-11Creating a newbranch pointer$ git checkout -b iss53Switched to a new branch "iss53"This is shorthand for:
$ git branch iss53$ git checkout iss53You work on your web site and do some commits. Doing so moves the 
$ vim index.html$ git commit -a -m added a new footer [issue 53]CHAPTER 3: Git Branching
$ git checkout masterSwitched to branch masterAt this point, your project working directory is exactly the way it was before
$ git checkout -b hotfixSwitched to a new branch hotfix$ vim index.html$ git commit -a -m fixed the broken email addressBasic Branching and Merging
$ git checkout master$ git merge hotfixUpdating f42c576..3a0874cFast-forward index.html | 2 ++ 1 file changed, 2 insertions(+)Youll notice the phrase fast-forward in that merge. Because the commit
git branch:$ git branch -d hotfixDeleted branch hotfix (3a0874c).Now you can switch back to your work-in-progress branch on issue #53 and
$ git checkout iss53Switched to branch "iss53"$ vim index.html$ git commit -a -m finished the new footer [issue 53][iss53 ad82d7a] finished the new footer [issue 53]1 file changed, 1 insertion(+)Basic Branching and Merging
$ git checkout masterSwitched to branch master$ git merge iss53Merge made by the recursive strategy.index.html |    1 +1 file changed, 1 insertion(+)This looks a bit dierent than the hotfix merge you did earlier. In this case,
$ git branch -d iss53Basic Merge Conflicts
$ git merge iss53Auto-merging index.htmlCONFLICT (content): Merge conflict in index.htmlAutomatic merge failed; fix conflicts and then commit the result.Git hasnt automatically created a new merge commit. It has paused the pro-
git status:$ git statusOn branch masterYou have unmerged paths.  (fix conflicts and run "git commit")Unmerged paths:  (use "git add <file>..." to mark resolution)    both modified:      index.htmlno changes added to commit (use "git add" and/or "git commit -a")Anything that has merge conflicts and hasnt been resolved is listed as un-
$ git mergetoolThis message is displayed because merge.tool is not configured.See git mergetool --tool-help or git help config for more details.git mergetool will now attempt to use one of the following tools:opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emergeMerging:index.htmlNormal merge conflict for index.html:  {local}: modified file  {remote}: modified fileHit return to start merge resolution tool (opendiff):If you want to use a merge tool other than the default (Git chose 
$ git statusOn branch masterAll conflicts fixed but you are still merging.  (use "git commit" to conclude merge)Changes to be committed:    modified:   index.htmlIf youre happy with that, and you verify that everything that had conflicts
es:$ git branch  iss53* master  testingNotice the 
git branch -v:$ git branch -v  iss53   93b412c fix javascript issue* master  7a98805 Merge branch iss53  testing 782fd34 add scott to the author list in the readmesThe useful 
git branch --merged:$ git branch --merged  iss53* masterBecause you already merged in 
$ git branch --no-merged  testingThis shows your other branch. Because it contains work that isnt merged in
$ git branch -d testingerror: The branch testing is not fully merged.If you are sure you want to delete it, run git branch -D testing.If you really do want to delete the branch and lose that work, you can force it
gitpush <remote> <branch>:$ git push origin serverfixCounting objects: 24, done.Delta compression using up to 8 threads.Compressing objects: 100% (15/15), done.Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.Total 24 (delta 2), reused 0 (delta 0)To https://github.com/schacon/simplegit * [new branch]      serverfix -> serverfixRemote Branches
origin/serverfix:$ git fetch originremote: Counting objects: 7, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 3 (delta 0)Unpacking objects: 100% (3/3), done.From https://github.com/schacon/simplegit * [new branch]      serverfix    -> origin/serverfixIts important to note that when you do a fetch that brings down new
$ git checkout -b serverfix origin/serverfixBranch serverfix set up to track remote branch serverfix from origin.Switched to a new branch serverfixThis gives you a local branch that you can work on that starts where 
--track shorthand:$ git checkout --track origin/serverfixBranch serverfix set up to track remote branch serverfix from origin.Switched to a new branch serverfixIn fact, this is so common that theres even a shortcut for that shortcut. If the
$ git checkout serverfixBranch serverfix set up to track remote branch serverfix from origin.Switched to a new branch serverfixTo set up a local branch with a 
$ git checkout -b sf origin/serverfixBranch sf set up to track remote branch serverfix from origin.Switched to a new branch sfNow, your local branch 
it at any time.$ git branch -u origin/serverfixBranch serverfix set up to track remote branch serverfix from origin.UPSTREAM SHORTHAND
$ git branch -vv  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets  master    1ae2a45 [origin/master] deploying index fix* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it  testing   5ea463a trying something newSo here we can see that our 
$ git push origin --delete serverfixTo https://github.com/schacon/simplegit - [deleted]         serverfixBasically all this does is remove the pointer from the server. The Git server
$ git checkout experiment$ git rebase masterFirst, rewinding head to replay your work on top of it...Applying: added staged commandIt works by going to the common ancestor of the two branches (the one
$ git checkout master$ git merge experimentNow, the snapshot pointed to by 
tion of git rebase:$ git rebase --onto master server clientThis basically says, Check out the client branch, figure out the patches from
):$ git checkout master$ git merge clientLets say you decide to pull in your server branch as well. You can rebase the
(master):$ git rebase master serverThis replays your 
master):$ git checkout master$ git merge serverYou can remove the 
:$ git branch -d client$ git branch -d serverThe Perils of Rebasing
$ git clone /opt/git/project.gitOr you can do this:
$ git clone file:///opt/git/project.gitGit operates slightly 
$ git remote add local_proj /opt/git/project.gitCHAPTER 4: Git on the Server
$ cd /var/www/htdocs/$ git clone --bare /path/to/git_project gitproject.git$ cd gitproject.git$ mv hooks/post-update.sample hooks/post-update$ chmod a+x hooks/post-updateThats all. The 
$ git clone https://example.com/gitproject.gitIn this particular case, were using the 
$ git clone ssh://user@server/project.gitOr you can use the shorter scp-like syntax for the SSH protocol:
$ git clone user@server:project.gitYou can also not specify a user, and Git assumes the user youre currently
so:$ git clone --bare my_project my_project.gitCloning into bare repository my_project.git...done.You should now have a copy of the Git directory data in your
$ git clone user@git.example.com:/opt/git/my_project.gitCHAPTER 4: Git on the Server
--shared option.$ ssh user@git.example.com$ cd /opt/git/my_project.git$ git init --bare --sharedYou see how easy it is to take a Git repository, create a bare version, and
$ cd /opt/git$ mkdir project.git$ cd project.git$ git init --bareInitialized empty Git repository in /opt/git/project.git/Then, John, Josie, or Jessica can push the first version of their project into
# on Johns computer$ cd myproject$ git init$ git add .$ git commit -m initial commit$ git remote add origin git@gitserver:/opt/git/project.git$ git push origin masterAt this point, the others can clone it down and push changes back up just as
$ git clone git@gitserver:/opt/git/project.git$ cd project$ vim README$ git commit -am fix for the README file$ git push origin masterWith this method, you can quickly get a read/write Git server up and running
$ git daemon --reuseaddr --base-path=/opt/git/ /opt/git/--reuseaddr allows the server to restart without waiting for old connec-
--httpd option.$ git instaweb --httpd=webrick[2009-02-21 10:02:21] INFO  WEBrick 1.3.1[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]That starts up an HTTPD server on port 1234 and then automatically starts a
the --stop option:$ git instaweb --httpd=webrick --stopCHAPTER 4: Git on the Server
$ git clone git://git.kernel.org/pub/scm/git/git.git$ cd git/$ make GITWEB_PROJECTROOT="/opt/git" prefix=/usr gitweb    SUBDIR gitweb    SUBDIR ../make[2]: GIT-VERSION-FILE is up to date.    GEN gitweb.cgi    GEN static/gitweb.js$ sudo cp -Rf gitweb /var/www/Notice that you have to tell the command where to find your Git repositories
$ git remote add gitlab https://server/namespace/project.gitIf you dont have a local copy of the repository, you can simply do this:
$ git clone https://server/namespace/project.gitThe web UI provides access to several useful views of the repository itself.
# Johns Machine$ git clone john@githost:simplegit.gitCloning into simplegit......$ cd simplegit/$ vim lib/simplegit.rb$ git commit -am removed invalid default value[master 738ee87] removed invalid default value 1 files changed, 1 insertions(+), 1 deletions(-)The second developer, Jessica, does the same thing  clones the repository
# Jessicas Machine$ git clone jessica@githost:simplegit.gitCloning into simplegit......$ cd simplegit/$ vim TODO$ git commit -am add reset task[master fbff5bc] add reset task 1 files changed, 1 insertions(+), 0 deletions(-)Now, Jessica pushes her work up to the server:
# Jessicas Machine$ git push origin master...To jessica@githost:simplegit.git   1edee6b..fbff5bc  master -> masterJohn tries to push his change up, too:
# Johns Machine$ git push origin masterTo john@githost:simplegit.gitCHAPTER 5: Distributed Git
$ git fetch origin...From john@githost:simplegit + 049d078...fbff5bc master     -> origin/masterAt this point, Johns local repository looks something like this:
$ git merge origin/masterMerge made by recursive.Contributing to a Project
$ git push origin master...To john@githost:simplegit.git   fbff5bc..72bbc59  master -> masterFinally, Johns commit history looks like this:
# Jessicas Machine$ git fetch origin...From jessica@githost:simplegit   fbff5bc..72bbc59  master     -> origin/masterThat pulls down the work John has pushed up in the meantime. Jessicas
$ git log --no-merges issue54..origin/mastercommit 738ee872852dfaa9d6634e0dea7a324040193016Author: John Smith <jsmith@example.com>Contributing to a Project
$ git checkout masterSwitched to branch masterYour branch is behind origin/master by 2 commits, and can be fast-forwarded.She can merge either 
$ git merge issue54Updating fbff5bc..4af4298Fast forward README           |    1 + lib/simplegit.rb |    6 +++++- 2 files changed, 6 insertions(+), 1 deletions(-)No problems occur; as you can see it was a simple fast-forward. Now Jessica
origin/master):$ git merge origin/masterAuto-merging lib/simplegit.rbMerge made by recursive. lib/simplegit.rb |    2 +- 1 files changed, 1 insertions(+), 1 deletions(-)CHAPTER 5: Distributed Git
$ git push origin master...To jessica@githost:simplegit.git   72bbc59..8059c15  master -> masterEach developer has committed a few times and merged each others work
# Jessicas Machine$ git checkout -b featureASwitched to a new branch featureA$ vim lib/simplegit.rb$ git commit -am add limit to log function[featureA 3300904] add limit to log function 1 files changed, 1 insertions(+), 1 deletions(-)At this point, she needs to share her work with John, so she pushes her 
$ git push -u origin featureA...To jessica@githost:simplegit.git * [new branch]      featureA -> featureAJessica emails John to tell him that shes pushed some work into a branch
# Jessicas Machine$ git fetch origin$ git checkout -b featureB origin/masterSwitched to a new branch featureBNow, Jessica makes a couple of commits on the 
$ vim lib/simplegit.rb$ git commit -am made the ls-tree function recursiveContributing to a Project
FIGURE 5-13Jessicas initialcommit history.[featureB e5b0fdc] made the ls-tree function recursive 1 files changed, 1 insertions(+), 1 deletions(-)$ vim lib/simplegit.rb$ git commit -am add ls-files[featureB 8512791] add ls-files 1 files changed, 5 insertions(+), 0 deletions(-)Jessicas repository looks like this:
git fetch:$ git fetch origin...From jessica@githost:simplegit * [new branch]      featureBee -> origin/featureBeeJessica can now merge this into the work she did with 
git merge:$ git merge origin/featureBeeAuto-merging lib/simplegit.rbMerge made by recursive. lib/simplegit.rb |    4 ++++ 1 files changed, 4 insertions(+), 0 deletions(-)CHAPTER 5: Distributed Git
$ git push -u origin featureB:featureBee...To jessica@githost:simplegit.git   fba9af8..cd685d1  featureB -> featureBeeThis is called a 
$ git fetch origin...From jessica@githost:simplegit   3300904..aad881d  featureA   -> origin/featureAThen, she can see what has been changed with 
git log:$ git log featureA..origin/featureAcommit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6Author: John Smith <jsmith@example.com>Date:   Fri May 29 19:57:33 2009 -0700    changed log output to 30 from 25Finally, she merges Johns work into her own 
$ git checkout featureASwitched to branch featureA$ git merge origin/featureAUpdating 3300904..aad881dFast forward lib/simplegit.rb |   10 +++++++++-1 files changed, 9 insertions(+), 1 deletions(-)Contributing to a Project
$ git commit -am small tweak[featureA 774b3ed] small tweak 1 files changed, 1 insertions(+), 1 deletions(-)$ git push...To jessica@githost:simplegit.git   3300904..774b3ed  featureA -> featureAJessicas commit history now looks something like this:
$ git clone (url)$ cd project$ git checkout -b featureA# (work)$ git commit# (work)$ git commitYou may want to use rebase -i to squash your work down to a single
myfork:$ git remote add myfork (url)Then you need to push your work up to it. Its easiest to push the topic
$ git push -u myfork featureAWhen your work has been pushed up to your fork, you need to notify the
$ git request-pull origin/master myforkThe following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:  John Smith (1):        added a new functionare available in the git repository at:  git://githost/simplegit.git featureAJessica Smith (2):      add limit to log function      change log output to 30 from 25 lib/simplegit.rb |   10 +++++++++- 1 files changed, 9 insertions(+), 1 deletions(-)The output can be sent to the maintainer  it tells them where the work was
$ git checkout -b featureB origin/master# (work)$ git commit$ git push myfork featureB# (email maintainer)$ git fetch originNow, each of your topics is contained within a silo  similar to a patch queue
$ git checkout featureA$ git rebase origin/master$ git push -f myfork featureAThis rewrites your history to now look like 
$ git checkout -b featureBv2 origin/master$ git merge --squash featureB# (change implementation)$ git commit$ git push myfork featureBv2The --squash option takes all the work on the merged branch and squash-
$ git checkout -b topicA# (work)$ git commit# (work)$ git commitNow you have two commits that you want to send to the mailing list. You use
$ git format-patch -M origin/master0001-add-limit-to-log-function.patch0002-changed-log-output-to-30-from-25.patchThe format-patch command prints out the names of the patch files it cre-
$ git send-email *.patch0001-added-limit-to-log-function.patch0002-changed-log-output-to-30-from-25.patchWho should the emails appear to be from? [Jessica Smith <jessica@example.com>]Emails will be sent from: Jessica Smith <jessica@example.com>Who should the emails be sent to? jessica@example.comMessage-ID to be used as In-Reply-To for the first email? yThen, Git spits out a bunch of log information looking something like this for
$ git branch sc/ruby_client masterOr, if you want to also switch to it immediately, you can use the 
checkout -b option:$ git checkout -b sc/ruby_client masterCHAPTER 5: Distributed Git
$ git apply /tmp/patch-ruby-client.patchThis modifies the files in your working directory. Its almost identical to run-
$ git apply --check 0001-seeing-if-this-helps-the-gem.patcherror: patch failed: ticgit.gemspec:1error: ticgit.gemspec: patch does not applyIf there is no output, then the patch should apply cleanly. This command al-
$ git am 0001-limit-log-function.patchApplying: add limit to log functionYou can see that it applied cleanly and automatically created the new com-
$ git log --pretty=fuller -1commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0CHAPTER 5: Distributed Git
$ git am 0001-seeing-if-this-helps-the-gem.patchApplying: seeing if this helps the gemerror: patch failed: ticgit.gemspec:1error: ticgit.gemspec: patch does not applyPatch failed at 0001.When you have resolved this problem run "git am --resolved".If you would prefer to skip this patch, instead run "git am --skip".To restore the original branch and stop patching run "git am --abort".This command puts conflict markers in any files it has issues with, much like
$ (fix the file)$ git add ticgit.gemspec$ git am --resolvedApplying: seeing if this helps the gemIf you want Git to try a bit more intelligently to resolve the conflict, you can
$ git am -3 0001-seeing-if-this-helps-the-gem.patchApplying: seeing if this helps the gemerror: patch failed: ticgit.gemspec:1error: ticgit.gemspec: patch does not applyUsing index info to reconstruct a base tree...Falling back to patching base and 3-way merge...No changes -- Patch already applied.In this case, this patch had already been applied. Without the 
$ git am -3 -i mboxCommit Body is:--------------------------seeing if this helps the gem--------------------------Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept allThis is nice if you have a number of patches saved, because you can view the
$ git remote add jessica git://github.com/jessica/myproject.git$ git fetch jessica$ git checkout -b rubyclient jessica/ruby-clientCHAPTER 5: Distributed Git
$ git pull https://github.com/onetimeguy/projectFrom https://github.com/onetimeguy/project * branch            HEAD       -> FETCH_HEADMerge made by recursive.Determining What Is Introduced
$ git log contrib --not mastercommit 5b6235bd297351589efc4d73316f0a68d484f118Maintaining a Project
$ git diff masterThis command gives you a 
$ git merge-base contrib master36c7dba2c95e6bbb78dfa822519ecfec6e1ca649$ git diff 36c7dbCHAPTER 5: Distributed Git
$ git diff master...contribThis command shows you only the work your current topic branch has intro-
FIGURE 5-28History after cherry-picking a commit ona topic branch.$ git cherry-pick e43a6Finished one cherry-pick.[master]: created a0a41a9: "More friendly message when locking the index fails." 3 files changed, 17 insertions(+), 3 deletions(-)This pulls the same change introduced in 
$ git config --global rerere.enabled trueNow, whenever you do a merge that resolves conflicts, the resolution will be
$ git tag -s v1.5 -m my signed 1.5 tagYou need a passphrase to unlock the secret key foruser: "Scott Chacon <schacon@gmail.com>"1024-bit DSA key, ID F721C45A, created 2009-02-09If you do sign your tags, you may have the problem of distributing the public
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92If you run 
GPG:$ git show maintainer-pgp-pub | gpg --importThey can use that key to verify all your signed tags. Also, if you include in-
$ git describe masterv1.6.2-rc1-20-g8c5b85cThis way, you can export a snapshot or build and name it something under-
git archive:$ git archive master --prefix=project/ | gzip > git describe master.tar.gz$ ls *.tar.gzv1.6.2-rc1-20-g8c5b85c.tar.gzIf someone opens that tarball, they get the latest snapshot of your project
git archive:$ git archive master --prefix=project/ --format=zip > git describe master.zipYou now have a nice tarball and a zip archive of your project release that you
$ git shortlog --no-merges master --not v1.0.1Chris Wanstrath (8):      Add support for annotated tags to Grit::Tag      Add packed-refs annotated tag support.      Add Grit::Commit#to_patchMaintaining a Project
$ git clone https://github.com/tonychacon/blink Cloning into blink...$ cd blink$ git checkout -b slow-blink Switched to a new branch slow-blink$ sed -i  s/1000/3000/ blink.ino $ git diff --word-diff diff --git a/blink.ino b/blink.inoindex 15b9911..a6cc5a5 100644--- a/blink.ino+++ b/blink.ino@@ -18,7 +18,7 @@ void setup() {// the loop routine runs over and over again forever:void loop() {  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)  [-delay(1000);-]{+delay(3000);+}               // wait for a second  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW  [-delay(1000);-]{+delay(3000);+}               // wait for a second}$ git commit -a -m three seconds is better [slow-blink 5ca509d] three seconds is better 1 file changed, 2 insertions(+), 2 deletions(-)$ git push origin slow-blink Username for https://github.com: tonychaconPassword for https://tonychacon@github.com:Counting objects: 5, done.Delta compression using up to 8 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.Total 3 (delta 1), reused 0 (delta 0)To https://github.com/tonychacon/blink * [new branch]      slow-blink -> slow-blinkClone our fork of the project locally
$ git remote add upstream https://github.com/schacon/blink $ git fetch upstream remote: Counting objects: 3, done.remote: Compressing objects: 100% (3/3), done.Unpacking objects: 100% (3/3), done.remote: Total 3 (delta 0), reused 0 (delta 0)From https://github.com/schacon/blinkContributing to a Project
 * [new branch]      master     -> upstream/master$ git merge upstream/master Auto-merging blink.inoCONFLICT (content): Merge conflict in blink.inoAutomatic merge failed; fix conflicts and then commit the result.$ vim blink.ino $ git add blink.ino$ git commit[slow-blink 3c8d735] Merge remote-tracking branch upstream/master \    into slower-blink$ git push origin slow-blink Counting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (6/6), done.Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done.Total 6 (delta 2), reused 0 (delta 0)To https://github.com/tonychacon/blink   ef4725c..3c8d735  slower-blink -> slow-blinkAdd the original repository as a remote named upstream
$ git ls-remote https://github.com/schacon/blink10d539600d86723087810ec636870a504f4fee4d HEAD
$ git fetch origin refs/pull/958/headFrom https://github.com/libgit2/libgit2 * branch            refs/pull/958/head -> FETCH_HEADThis tells Git, Connect to the 
git fetch:$ git fetch#  * [new ref]         refs/pull/1/head -> origin/pr/1 * [new ref]         refs/pull/2/head -> origin/pr/2 * [new ref]         refs/pull/4/head -> origin/pr/4# Now all of the remote pull requests are represented locally with refs that act
$ git checkout pr/2Checking out files: 100% (3769/3769), done.Branch pr/2 set up to track remote branch pr/2 from origin.Switched to a new branch pr/2The eagle-eyed among you would note the 
$ git logcommit 734713bc047d87bf7eac9674765ae793478c50d3Author: Scott Chacon <schacon@gmail.com>Date:   Fri Jan 2 18:32:33 2009 -0800    fixed refs handling, added gc auto, updated testscommit d921970aadf03b3cf0e71becdaab3147ba71cdefMerge: 1c002dd... 35cfb2b...Author: Scott Chacon <schacon@gmail.com>Date:   Thu Dec 11 15:08:43 2008 -0800    Merge commit phedders/rdocscommit 1c002dd4b536e7479fe34593e72e6c6c1819e53bAuthor: Scott Chacon <schacon@gmail.com>Date:   Thu Dec 11 14:58:32 2008 -0800    added some blame and merge stuffIn this case, choose 
ous):$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b$ git show 1c002dd4b536e7479f$ git show 1c002dGit can figure out a short, unique abbreviation for your SHA-1 values. If you
$ git log --abbrev-commit --pretty=onelineca82a6d changed the version number085bb3b removed unnecessary test codea11bef0 first commitGenerally, eight to ten characters are more than enough to be unique within
ca82a6d:$ git show ca82a6dff817ec66f44342007202690a93763949$ git show topic1If you want to see which specific SHA-1 a branch points to, or if you want to
$ git rev-parse topic1ca82a6dff817ec66f44342007202690a93763949RefLog Shortnames
git reflog:$ git reflog734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updatedd921970 HEAD@{1}: merge phedders/rdocs: Merge made by recursive.1c002dd HEAD@{2}: commit: added some blame and merge stuff1c36188 HEAD@{3}: rebase -i (squash): updating HEAD95df984 HEAD@{4}: commit: # This is a combination of two commits.1c36188 HEAD@{5}: rebase -i (squash): updating HEAD7e05da5 HEAD@{6}: rebase -i (pick): updating HEADEvery time your branch tip is updated for any reason, Git stores that infor-
$ git show HEAD@{5}You can also use this syntax to see where a branch was some specific
$ git show master@{yesterday}That shows you where the branch tip was yesterday. This technique only
git log -g:$ git log -g mastercommit 734713bc047d87bf7eac9674765ae793478c50d3Reflog: master@{0} (Scott Chacon <schacon@gmail.com>)Reflog message: commit: fixed refs handling, added gc auto, updatedAuthor: Scott Chacon <schacon@gmail.com>Date:   Fri Jan 2 18:32:33 2009 -0800    fixed refs handling, added gc auto, updated testscommit d921970aadf03b3cf0e71becdaab3147ba71cdefReflog: master@{1} (Scott Chacon <schacon@gmail.com>)Reflog message: merge phedders/rdocs: Merge made by recursive.Author: Scott Chacon <schacon@gmail.com>Date:   Thu Dec 11 15:08:43 2008 -0800    Merge commit phedders/rdocsIts important to note that the reflog information is strictly local  its a log of
$ git log --pretty=format:%h %s --graph* 734713b fixed refs handling, added gc auto, updated tests*   d921970 Merge commit phedders/rdocs|\| * 35cfb2b Some rdoc changes* | 1c002dd added some blame and merge stuff|/* 1c36188 ignore *.gem* 9b29157 add open3_detach to gemspec file listRevision Selection
$ git show HEAD^commit d921970aadf03b3cf0e71becdaab3147ba71cdefMerge: 1c002dd... 35cfb2b...Author: Scott Chacon <schacon@gmail.com>Date:   Thu Dec 11 15:08:43 2008 -0800    Merge commit phedders/rdocsYou can also specify a number 
$ git show d921970^commit 1c002dd4b536e7479fe34593e72e6c6c1819e53bAuthor: Scott Chacon <schacon@gmail.com>Date:   Thu Dec 11 14:58:32 2008 -0800    added some blame and merge stuff$ git show d921970^2commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548Author: Paul Hedderly <paul+git@mjr.org>Date:   Wed Dec 10 22:22:03 2008 +0000    Some rdoc changesThe other main ancestry specification is the 
$ git show HEAD~3commit 1c3618887afb5fbcbea25b7c013f4e2114448b8dAuthor: Tom Preston-Werner <tom@mojombo.com>Date:   Fri Nov 7 13:47:59 2008 -0500    ignore *.gemCHAPTER 7: Git Tools
$ git show HEAD^^^commit 1c3618887afb5fbcbea25b7c013f4e2114448b8dAuthor: Tom Preston-Werner <tom@mojombo.com>Date:   Fri Nov 7 13:47:59 2008 -0500    ignore *.gemYou can also combine these syntaxes  you can get the second parent of the
$ git log master..experimentDCIf, on the other hand, you want to see the opposite  all commits in 
experi-ment:$ git log experiment..masterFEThis is useful if you want to keep the 
$ git log origin/master..HEADThis command shows you any commits in your current branch that arent in
$ git log refA..refB$ git log ^refA refB$ git log refB --not refAThis is nice because with this syntax you can specify more than two refer-
$ git log refA refB ^refC$ git log refA refB --not refCThis makes for a very powerful revision query system that should help you
run$ git log master...experimentFEDCAgain, this gives you normal 
$ git log --left-right master...experiment< F< ERevision Selection
$ git add -i           staged     unstaged path  1:    unchanged        +0/-1 TODO  2:    unchanged        +1/-1 index.html  3:    unchanged        +5/-1 lib/simplegit.rb*** Commands ***  1: status     2: update      3: revert     4: add untracked  5: patch      6: diff        7: quit       8: helpWhat now>You can see that this command shows you a much 
$ git statusChanges to be committed:  (use "git reset HEAD <file>..." to unstage) modified:   index.html
git stash or git stash save:$ git stashSaved working directory and index state \  "WIP on master: 049d078 added the index file"HEAD is now at 049d078 added the index file(To restore them type "git stash apply")Your working directory is clean:
$ git status# On branch masternothing to commit, working directory cleanAt this point, you can easily switch branches and do work elsewhere; your
use git stash list:$ git stash liststash@{0}: WIP on master: 049d078 added the index filestash@{1}: WIP on master: c264051 Revert "added file_size"stash@{2}: WIP on master: 21d80a5 added number to logIn this case, two stashes were done previously, so you have access to three
$ git stash applyOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory) modified:   index.html
position:$ git stash apply --indexOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage) modified:   index.html
$ git stash liststash@{0}: WIP on master: 049d078 added the index filestash@{1}: WIP on master: c264051 Revert "added file_size"stash@{2}: WIP on master: 21d80a5 added number to log$ git stash drop stash@{0}Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)You can also run 
$ git status -sM  index.html M lib/simplegit.rb$ git stash --keep-indexSaved working directory and index state WIP on master: 1b65b17 added the index fileHEAD is now at 1b65b17 added the index file$ git status -sM  index.htmlAnother common thing you may want to do with stash is to stash the un-
$ git status -sM  index.htmlStashing and Cleaning
 M lib/simplegit.rb?? new-file.txt$ git stash -uSaved working directory and index state WIP on master: 1b65b17 added the index fileHEAD is now at 1b65b17 added the index file$ git status -s$Finally, if you specify the 
$ git stash --patchdiff --git a/lib/simplegit.rb b/lib/simplegit.rbindex 66d332e..8bb5674 100644--- a/lib/simplegit.rb+++ b/lib/simplegit.rb@@ -16,6 +16,10 @@ class SimpleGit         return #{git_cmd} 2>&1.chomp       end     end++    def show(treeish = master)+      command("git show #{treeish}")+    end end testStash this hunk [y,n,q,a,d,/,e,?]? ySaved working directory and index state WIP on master: 1b65b17 added the index fileCreating a Branch from a Stash
$ git stash branch testchangesM index.html
$ git clean -d -nWould remove test.oWould remove tmp/By default, the 
$ git status -s M lib/simplegit.rb?? build.TMP?? tmp/$ git clean -n -dWould remove build.TMPWould remove tmp/$ git clean -n -d -xWould remove build.TMPWould remove test.oWould remove tmp/If you dont know what the 
$ git clean -x -iWould remove the following items:  build.TMP  test.o*** Commands ***    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit    6: helpWhat now>This way you can step through each file individually or specify patterns for
-a:$ git tag -s v1.5 -m my signed 1.5 tagYou need a passphrase to unlock the secret key forSigning Your Work
$ git show v1.5tag v1.5Tagger: Ben Straub <ben@straub.cc>Date:   Sat May 3 20:29:41 2014 -0700my signed 1.5 tag-----BEGIN PGP SIGNATURE-----Version: GnuPG v1iQEcBAABAgAGBQJTZbQlAAoJEF0+sviABDDrZbQH/09PfE51KPVPlanr6q1v4/UtLQxfojUWiLQdg2ESJItkcuweYg+kc3HCyFejeDIBw9dpXt00rY26p05qrpnG+85bhM1/PswpPLuBSr+oCIDj5GMC2r2iEKsfv2fJbNW8iWAXVLoWZRF8B0MfqX/YTMbmecorc4iXzQu7tupRihslbNkfvfciMnSDeSvzCpWAHl7h8Wj6hhqePmLm9lAYqnKp8S5B/1SSQuEAjRZgI4IexpZoeKGVDptPHxLLS38fozsyi0QyDyzEgJxcJQVMXxViRUysgqjcpT8+iQM1PblGfHR4XAhuOqN5Fx06PSaFZhqvWFezJ28/CLyX5q+oIVk==EFTF-----END PGP SIGNATURE-----commit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon <schacon@gee-mail.com>Date:   Mon Mar 17 21:52:11 2008 -0700    changed the version numberVerifying Tags
$ git tag -v v1.4.2.1object 883653babd8ee7ea23e6a5c392bb739348b1eb61type committag v1.4.2.1tagger Junio C Hamano <junkio@cox.net> 1158138501 -0700GIT 1.4.2.1Minor fixes since 1.4.2, including git-mv and git-http with alternates.CHAPTER 7: Git Tools
$ git commit -a -S -m signed commitYou need a passphrase to unlock the secret key foruser: "Scott Chacon (Git signing key) <schacon@gmail.com>"2048-bit RSA key, ID 0A46826A, created 2014-06-04[master 5c3386c] signed commit 4 files changed, 4 insertions(+), 24 deletions(-) rewrite Rakefile (100%) create mode 100644 lib/git.rbTo see and verify these signatures, there is also a 
git log.$ git log --show-signature -1commit 5c3386cf54bba0a33a32da706aa52bc0155503c2gpg: Signature made Wed Jun  4 19:49:17 2014 PDT using RSA key ID 0A46826Agpg: Good signature from "Scott Chacon (Git signing key) <schacon@gmail.com>"Author: Scott Chacon <schacon@gmail.com>Date:   Wed Jun 4 19:49:17 2014 -0700    signed commitAdditionally, you can configure 
$ git log --pretty="format:%h %G? %aN  %s"5c3386c G Scott Chacon  signed commitca82a6d N Scott Chacon  changed the version number085bb3b N Scott Chacon  removed unnecessary test codea11bef0 N Scott Chacon  first commitHere we can see that only the latest commit is signed and valid and the pre-
$ git merge --verify-signatures non-verifyfatal: Commit ab06180 does not have a GPG signature.If the merge contains only valid signed commits, the merge command will
$ git merge --verify-signatures signed-branchCommit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) <schacon@gmail.com>Updating 5c3386c..13ad65eFast-forward README | 2 ++ 1 file changed, 2 insertions(+)You can also use the 
$ git merge --verify-signatures -S  signed-branchCommit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) <schacon@gmail.com>You need a passphrase to unlock the secret key foruser: "Scott Chacon (Git signing key) <schacon@gmail.com>"2048-bit RSA key, ID 0A46826A, created 2014-06-04Merge made by the recursive strategy.CHAPTER 7: Git Tools
$ git grep -n gmtime_rcompat/gmtime.c:3:#undef gmtime_rcompat/gmtime.c:8:      return git_gmtime_r(timep, &result);compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)compat/gmtime.c:16:     ret = gmtime_r(timep, result);compat/mingw.c:606:struct tm *gmtime_r(const time_t *timep, struct tm *result)compat/mingw.h:162:struct tm *gmtime_r(const time_t *timep, struct tm *result);date.c:429:             if (gmtime_r(&now, &now_tm))date.c:492:             if (gmtime_r(&time, tm)) {git-compat-util.h:721:struct tm *git_gmtime_r(const time_t *, struct tm *);git-compat-util.h:723:#define gmtime_r git_gmtime_rThere are a number of interesting options you can provide the 
--count option:$ git grep --count gmtime_rcompat/gmtime.c:4compat/mingw.c:1compat/mingw.h:1date.c:2git-compat-util.h:2If you want to see what method or function it thinks it has found a match in,
-p:$ git grep -p gmtime_r *.cdate.c=static int match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)date.c:         if (gmtime_r(&now, &now_tm))date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)date.c:         if (gmtime_r(&time, tm)) {So here we can see that 
$ git grep --break --heading \    -n -e #define --and \( -e LINK -e BUF_MAX \) v1.8.0v1.8.0:builtin/index-pack.c62:#define FLAG_LINK (1u<<20)v1.8.0:cache.h73:#define S_IFGITLINK  016000074:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)v1.8.0:environment.c54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKSv1.8.0:strbuf.c326:#define STRBUF_MAXLINK (2*PATH_MAX)CHAPTER 7: Git Tools
-S option.$ git log -SZLIB_BUF_MAX --onelinee01503b zlib: allow feeding more than 4GB in one goef49a7a zlib: zlib can only process 4GB at a timeIf we look at the 
$ git log -L :git_deflate_bound:zlib.ccommit ef49a7a0126d64359c974b4b3b71d7ad42ee3bcaAuthor: Junio C Hamano <gitster@pobox.com>Date:   Fri Jun 10 11:52:15 2011 -0700    zlib: zlib can only process 4GB at a timediff --git a/zlib.c b/zlib.c--- a/zlib.c+++ b/zlib.c@@ -85,5 +130,5 @@-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size) {-       return deflateBound(strm, size);+       return deflateBound(&strm->z, size); }commit 225a6f1068f71723a910e8565db4e252b3ca21faAuthor: Junio C Hamano <gitster@pobox.com>Date:   Fri Jun 10 11:18:17 2011 -0700    zlib: wrap deflateBound() toodiff --git a/zlib.c b/zlib.c--- a/zlib.c+++ b/zlib.c@@ -81,0 +85,5 @@+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)+{+       return deflateBound(strm, size);+}+If Git cant figure out how to match a function or method in your program-
$ git commit --amendThat drops you into your text editor, which has your last commit message in
$ git rebase -i HEAD~3Remember again that this is a rebasing command  every commit included
$ git log --pretty=format:"%h %s" HEAD~3..HEADa5f4a0d added cat-file310154e updated README formatting and added blamef7f3f6d changed my name a bitNotice the reverse order. The interactive rebase gives you a script that its go-
$ git rebase -i HEAD~3Stopped at f7f3f6d... changed my name a bitYou can amend the commit now, with       git commit --amendOnce youre satisfied with your changes, run       git rebase --continueRewriting History
$ git commit --amendChange the commit message, and exit the editor. Then, run
$ git rebase --continueThis command will apply the other two commits automatically, and then
done:$ git reset HEAD^$ git add README$ git commit -m updated README formatting$ git add lib/simplegit.rb$ git commit -m added blame$ git rebase --continueGit applies the last commit (
$ git log -4 --pretty=format:"%h %s"1c002dd added cat-file9b29157 added blame35cfb2b updated README formattingf3cc40e changed my name a bitOnce again, this changes the SHA-1s of all the commits in your list, so make
filter-branch:$ git filter-branch --tree-filter rm -f passwords.txt HEADRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)Ref refs/heads/master was rewrittenThe --tree-filter option runs the specified command 
$ git filter-branch --subdirectory-filter trunk HEADRewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)Ref refs/heads/master was rewrittenNow your new project root is what was in the 
--commit-filter:$ git filter-branch --commit-filter         if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];        then                GIT_AUTHOR_NAME="Scott Chacon";                GIT_AUTHOR_EMAIL="schacon@example.com";                git commit-tree "$@";        else                git commit-tree "$@";        fi HEADThis goes through and rewrites every commit to have your new address. Be-
$ git cat-file -p HEADtree cfda3bf379e4f8dba8717dee55aab78aef7f4dafauthor Scott Chacon  1301511835 -0700Reset Demystified
committer Scott Chacon  1301511835 -0700initial commit$ git ls-tree -r HEAD100644 blob a906cb2a4a904a152...   README100644 blob 8f94139338f9404f2...   Rakefile040000 tree 99f1a6d12cb4b6f19...   libThe cat-file and 
$ git ls-files -s100644 a906cb2a4a904a152e80877d4088654daad0c859 0 README
$ git checkout -b whitespaceSwitched to a new branch whitespace$ unix2dos hello.rbunix2dos: converting file hello.rb to DOS format ...$ git commit -am converted hello.rb to DOS[whitespace 3270f76] converted hello.rb to DOS 1 file changed, 7 insertions(+), 7 deletions(-)$ vim hello.rb$ git diff -bdiff --git a/hello.rb b/hello.rbindex ac51efd..e85207e 100755--- a/hello.rb+++ b/hello.rb@@ -1,7 +1,7 @@ #! /usr/bin/env ruby def hello-  puts hello world+  puts hello mundo^M end hello()$ git commit -am hello mundo changeCHAPTER 7: Git Tools
$ git checkout masterSwitched to branch master$ vim hello.rb$ git diffdiff --git a/hello.rb b/hello.rbindex ac51efd..36c06c8 100755--- a/hello.rb+++ b/hello.rb@@ -1,5 +1,6 @@ #! /usr/bin/env ruby+# prints out a greeting def hello   puts hello world end$ git commit -am document the function[master bec6336] document the function 1 file changed, 1 insertion(+)Now we try to merge in our 
$ git merge whitespaceAuto-merging hello.rbCONFLICT (content): Merge conflict in hello.rbAutomatic merge failed; fix conflicts and then commit the result.ABORTING A MERGE
git merge --abort.$ git status -sb## masterAdvanced Merging
UU hello.rb$ git merge --abort$ git status -sb## masterThe git merge --abort option tries to revert back to your state before
$ git merge -Xignore-space-change whitespaceAuto-merging hello.rbMerge made by the recursive strategy. hello.rb | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)Since in this case, the actual file changes were not conflicting, once we ig-
$ git show :1:hello.rb > hello.common.rb$ git show :2:hello.rb > hello.ours.rb$ git show :3:hello.rb > hello.theirs.rbIf you want to get a little more hard core, you can also use the 
files.$ git ls-files -u100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1 hello.rb
$ git merge-file -p \    hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb$ git diff -bdiff --cc hello.rbindex 36c06c8,e85207e..0000000--- a/hello.rb+++ b/hello.rb@@@ -1,8 -1,7 +1,8 @@@  #! /usr/bin/env ruby +# prints out a greeting  def hello-   puts hello world+   puts hello mundo  end  hello()At this point we have nicely merged the file. In fact, this actually works better
git diff --ours$ git diff --ours* Unmerged path hello.rbdiff --git a/hello.rb b/hello.rbindex 36c06c8..44d0a25 100755--- a/hello.rb+++ b/hello.rb@@ -2,7 +2,7 @@ # prints out a greeting def hello-  puts hello world+  puts hello mundo endCHAPTER 7: Git Tools
hello.theirs.rb file.$ git diff --theirs -b* Unmerged path hello.rbdiff --git a/hello.rb b/hello.rbindex e85207e..44d0a25 100755--- a/hello.rb+++ b/hello.rb@@ -1,5 +1,6 @@ #! /usr/bin/env ruby+# prints out a greeting def hello   puts hello mundo endFinally, you can see how the file has changed from both sides with 
git diff--base.$ git diff --base -b* Unmerged path hello.rbdiff --git a/hello.rb b/hello.rbindex ac51efd..44d0a25 100755--- a/hello.rb+++ b/hello.rb@@ -1,7 +1,8 @@ #! /usr/bin/env ruby+# prints out a greeting def hello-  puts hello world+  puts hello mundo end hello()Advanced Merging
$ git clean -fRemoving hello.common.rbRemoving hello.ours.rbRemoving hello.theirs.rbCHECKING OUT CONFLICTS
$ git log --graph --oneline --decorate --all* f1270f7 (HEAD, master) update README* 9af9d3b add a README* 694971d update phrase to hola world| * e3eb223 (mundo) add more tests| * 7cff591 add testing script| * c3ffff1 changed text to hello mundo|/* b7dcc89 initial hello world codeWe now have three unique commits that live only on the 
$ git merge mundoAuto-merging hello.rbCONFLICT (content): Merge conflict in hello.rbAutomatic merge failed; fix conflicts and then commit the result.We would like to see what the merge conflict is. If we open up the file, well
$ git checkout --conflict=diff3 hello.rbOnce we run that, the file will look like this instead:
$ git config --global merge.conflictstyle diff3The git checkout command can also take 
.$ git log --oneline --left-right HEAD...MERGE_HEAD< f1270f7 update README< 9af9d3b add a README< 694971d update phrase to hola world> e3eb223 add more tests> 7cff591 add testing script> c3ffff1 changed text to hello mundoThats a nice list of the six total commits involved, as well as which line of
$ git log --oneline --left-right --merge< 694971d update phrase to hola world> c3ffff1 changed text to hello mundoIf you run that with the 
$ git diffdiff --cc hello.rbindex 0399cd5,59727f0..0000000--- a/hello.rb+++ b/hello.rb@@@ -1,7 -1,7 +1,11 @@@  #! /usr/bin/env ruby  def hello++<<<<<<< HEAD +  puts hola world++=======+   puts hello mundo++>>>>>>> mundo  end  hello()The format is called Combined 
$ vim hello.rb$ git diffAdvanced Merging
$ git log --cc -p -1commit 14f41939956d80b9e17bb8721354c33f8d5b5a79Merge: f1270f7 e3eb223Author: Scott Chacon <schacon@gmail.com>Date:   Fri Sep 19 18:14:49 2014 +0200    Merge branch mundo    Conflicts:        hello.rbdiff --cc hello.rbindex 0399cd5,59727f0..e1d0799--- a/hello.rb+++ b/hello.rb@@@ -1,7 -1,7 +1,7 @@@  #! /usr/bin/env ruby  def hello-   puts hola world -  puts hello mundo++  puts hola mundo  endCHAPTER 7: Git Tools
$ git revert -m 1 HEAD[master b1d8379] Revert "Merge branch topic"CHAPTER 7: Git Tools
$ git merge topicAlready up-to-date.Theres nothing in 
$ git revert ^M[master 09f0126] Revert "Revert "Merge branch topic""$ git merge topicIn this example, 
$ git merge mundoAuto-merging hello.rbCONFLICT (content): Merge conflict in hello.rbResolved hello.rb using previous resolution.Automatic merge failed; fix conflicts and then commit the result.However if we run it with 
$ git merge -Xours mundoAuto-merging hello.rbMerge made by the recursive strategy. hello.rb | 2 +- test.sh  | 2 ++ 2 files changed, 3 insertions(+), 1 deletion(-) create mode 100644 test.shIn that case, instead of getting conflict markers in the file with hello mun-
$ git merge -s ours mundoMerge made by the ours strategy.$ git diff HEAD HEAD~$You can see that there is no 
$ git remote add rack_remote https://github.com/rack/rack$ git fetch rack_remote --no-tagswarning: no common commitsremote: Counting objects: 3184, done.remote: Compressing objects: 100% (1465/1465), done.CHAPTER 7: Git Tools
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.Resolving deltas: 100% (1952/1952), done.From https://github.com/rack/rack * [new branch]      build      -> rack_remote/build * [new branch]      master     -> rack_remote/master * [new branch]      rack-0.4   -> rack_remote/rack-0.4 * [new branch]      rack-0.9   -> rack_remote/rack-0.9$ git checkout -b rack_branch rack_remote/masterBranch rack_branch set up to track remote branch refs/remotes/rack_remote/master.Switched to a new branch "rack_branch"Now we have the root of the Rack project in our 
$ lsAUTHORS         KNOWN-ISSUES   Rakefile      contrib         libCOPYING         README         bin           example         test$ git checkout masterSwitched to branch "master"$ lsREADMEThis is sort of a strange concept. Not all the branches in your repository ac-
$ git read-tree --prefix=rack/ -u rack_branchWhen we commit, it looks like we have all the Rack files under that subdirec-
$ git checkout rack_branch$ git pullThen, we can merge those changes back into our 
$ git checkout master$ git merge --squash -s recursive -Xsubtree=rack rack_branchSquash commit -- not updating HEADAutomatic merge went well; stopped before committing as requestedAll the changes from the Rack project are merged in and ready to be commit-
$ git diff-tree -p rack_branchOr, to compare what is in your 
$ git diff-tree -p rack_remote/masterCHAPTER 7: Git Tools
ting:$ git config --global rerere.enabled trueYou can also turn it on by creating the 
$ git merge i18n-worldAuto-merging hello.rbCONFLICT (content): Merge conflict in hello.rbRecorded preimage for hello.rbAutomatic merge failed; fix conflicts and then commit the result.You should notice the new line 
$ git status# On branch master# Unmerged paths:#   (use "git reset HEAD <file>..." to unstage)#   (use "git add <file>..." to mark resolution)## both modified:      hello.rb
$ git rerere statushello.rbAnd git rerere diff will show the current state of the resolution - what
$ git rerere diff--- a/hello.rb+++ b/hello.rb@@ -1,11 +1,11 @@ #! /usr/bin/env ruby def hello-<<<<<<<-  puts hello mundo-=======+<<<<<<< HEAD   puts hola world->>>>>>>+=======+  puts hello mundo+>>>>>>> i18n-world endAlso (and this isnt really related to 
$ git ls-files -u100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1 hello.rb
$ git rerere diff--- a/hello.rb+++ b/hello.rb@@ -1,11 +1,7 @@ #! /usr/bin/env ruby def hello-<<<<<<<Rerere
$ git add hello.rb$ git commitRecorded resolution for hello.rb.[master 68e16e5] Merge branch i18nYou can see that it Recorded resolution for FILE.
$ git reset --hard HEAD^HEAD is now at ad63f15 i18n the helloOur merge is undone. Now lets rebase the topic branch.
$ git checkout i18n-worldSwitched to branch i18n-world$ git rebase masterFirst, rewinding head to replay your work on top of it...Applying: i18n one wordUsing index info to reconstruct a base tree...Falling back to patching base and 3-way merge...Auto-merging hello.rbCONFLICT (content): Merge conflict in hello.rbResolved hello.rb using previous resolution.Failed to merge in the changes.Patch failed at 0001 i18n one wordNow, we got the same merge conflict like we expected, but take a look at the
$ git diffdiff --cc hello.rbindex a440db6,54336ba..0000000--- a/hello.rb+++ b/hello.rb@@@ -1,7 -1,7 +1,7 @@@  #! /usr/bin/env ruby  def hello-   puts hola world -  puts hello mundoRerere
$ git checkout --conflict=merge hello.rb$ cat hello.rb#! /usr/bin/env rubydef hello<<<<<<< ours  puts hola world=======  puts hello mundo>>>>>>> theirsendWe saw an example of this in 
$ git rerereResolved hello.rb using previous resolution.$ cat hello.rb#! /usr/bin/env rubydef helloCHAPTER 7: Git Tools
$ git add hello.rb$ git rebase --continueApplying: i18n one wordSo, if you do a lot of re-merges, or want to keep a topic branch up to date
$ git blame -L 12,22 simplegit.rb^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 12)  def show(tree = master)^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 13)   command("git show #{tree}")^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 14)  end^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 15)9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 16)  def log(tree = master)79eaf55d (Scott Chacon  2008-04-06 10:15:08 -0700 17)   command("git log #{tree}")9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 18)  end9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 19)42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 20)  def blame(path)Debugging with Git337
$ git blame -C -L 141,153 GITPackUpload.mf344f58d GITServerHandler.m (Scott 2009-01-04 141)f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromCf344f58d GITServerHandler.m (Scott 2009-01-04 143) {70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@"GATHER COMMIad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)ad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;ad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [gad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)ad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"GATHER COMMIad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb56ef2caf GITServerHandler.m (Scott 2009-01-05 153)This is really useful. Normally, you get as the original commit the commit
gitbisect good [good_commit]:$ git bisect start$ git bisect bad$ git bisect good v1.0Bisecting: 6 revisions left to test after this[ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] error handling on repoGit figured out that about 12 commits came between the commit you
$ git bisect goodBisecting: 3 revisions left to test after this[b047b02ea83310a70fd603dc8cd7a6cd13d15c04] secure this thingNow youre on another commit, halfway between the one you just tested
$ git bisect badBisecting: 1 revisions left to test after this[f71ce38690acf49c1f3c9bea38e09d82a5ce6014] drop exceptions tableThis commit is fine, and now Git has all the information it needs to deter-
this bug:$ git bisect goodb047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commitcommit b047b02ea83310a70fd603dc8cd7a6cd13d15c04Author: PJ Hyett <pjhyett@example.com>Date:   Tue Jan 27 14:48:32 2009 -0800    secure this thing:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  configWhen youre finished, you should run 
$ git bisect resetThis is a powerful tool that can help you check hundreds of commits for an
$ git bisect start HEAD v1.0$ git bisect run test-error.shDoing so automatically runs 
$ git submodule add https://github.com/chaconinc/DbConnectorCloning into DbConnector...remote: Counting objects: 11, done.remote: Compressing objects: 100% (10/10), done.remote: Total 11 (delta 0), reused 11 (delta 0)Unpacking objects: 100% (11/11), done.Checking connectivity... done.By default, submodules will add the subproject into a directory named the
$ git statusOn branch masterYour branch is up-to-date with origin/master.Changes to be committed:  (use "git reset HEAD <file>..." to unstage) new file:   .gitmodules
$ git diff --cached DbConnectordiff --git a/DbConnector b/DbConnectornew file mode 160000index 0000000..c3f01dc--- /dev/null+++ b/DbConnector@@ -0,0 +1 @@+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bcCHAPTER 7: Git Tools
git diff.$ git diff --cached --submodulediff --git a/.gitmodules b/.gitmodulesnew file mode 100644index 0000000..71fc376--- /dev/null+++ b/.gitmodules@@ -0,0 +1,3 @@+[submodule "DbConnector"]+       path = DbConnector+       url = https://github.com/chaconinc/DbConnectorSubmodule DbConnector 0000000...c3f01dc (new submodule)When you commit, you see something like this:
$ git commit -am added DbConnector module[master fb9093c] added DbConnector module 2 files changed, 4 insertions(+) create mode 100644 .gitmodules create mode 160000 DbConnectorNotice the 
$ git clone https://github.com/chaconinc/MainProjectCloning into MainProject...remote: Counting objects: 14, done.remote: Compressing objects: 100% (13/13), done.remote: Total 14 (delta 1), reused 13 (delta 0)Unpacking objects: 100% (14/14), done.Checking connectivity... done.Submodules343
$ git submodule initSubmodule DbConnector (https://github.com/chaconinc/DbConnector) registered for path DbConnector$ git submodule updateCloning into DbConnector...remote: Counting objects: 11, done.remote: Compressing objects: 100% (10/10), done.remote: Total 11 (delta 0), reused 11 (delta 0)Unpacking objects: 100% (11/11), done.Checking connectivity... done.Submodule path DbConnector: checked out c3f01dc8862123d317dd46284b05b6892c7b29bcNow your 
$ git clone --recursive https://github.com/chaconinc/MainProjectCloning into MainProject...remote: Counting objects: 14, done.remote: Compressing objects: 100% (13/13), done.remote: Total 14 (delta 1), reused 13 (delta 0)Unpacking objects: 100% (14/14), done.Checking connectivity... done.CHAPTER 7: Git Tools
$ git fetchFrom https://github.com/chaconinc/DbConnector   c3f01dc..d0354fc  master     -> origin/master$ git merge origin/masterUpdating c3f01dc..d0354fcFast-forward scripts/connect.sh | 1 + src/db.c           | 1 + 2 files changed, 2 insertions(+)Now if you go back into the main project and run 
$ git config --global diff.submodule log$ git diffSubmodule DbConnector c3f01dc..d0354fc:Submodules345
$ git submodule update --remote DbConnectorremote: Counting objects: 4, done.remote: Compressing objects: 100% (2/2), done.remote: Total 4 (delta 2), reused 4 (delta 2)Unpacking objects: 100% (4/4), done.From https://github.com/chaconinc/DbConnector   3f19983..d0354fc  master     -> origin/masterSubmodule path DbConnector: checked out d0354fc054692d3906c85c3af05ddce39a1c0644This command will by default assume that you want to update the checkout
.gitmodules file:$ git config -f .gitmodules submodule.DbConnector.branch stable$ git submodule update --remoteremote: Counting objects: 4, done.remote: Compressing objects: 100% (2/2), done.remote: Total 4 (delta 2), reused 4 (delta 2)Unpacking objects: 100% (4/4), done.From https://github.com/chaconinc/DbConnector   27cf5d3..c87d55d  stable -> origin/stableSubmodule path DbConnector: checked out c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687If you leave 
$ git statusOn branch masterYour branch is up-to-date with origin/master.Changes not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)  modified:   .gitmodules  modified:   DbConnector (new commits)no changes added to commit (use "git add" and/or "git commit -a")If you set the configuration setting 
$ git config status.submodulesummary 1$ git statusOn branch masterYour branch is up-to-date with origin/master.Changes not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory) modified:   .gitmodules
$ git diffdiff --git a/.gitmodules b/.gitmodulesindex 6fc0b3d..fd1cc29 100644--- a/.gitmodules+++ b/.gitmodules@@ -1,3 +1,4 @@ [submodule "DbConnector"]Submodules347
git log -p.$ git log -p --submodulecommit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7aeAuthor: Scott Chacon <schacon@gmail.com>Date:   Wed Sep 17 16:37:02 2014 +0200    updating DbConnector for bug fixesdiff --git a/.gitmodules b/.gitmodulesindex 6fc0b3d..fd1cc29 100644--- a/.gitmodules+++ b/.gitmodules@@ -1,3 +1,4 @@ [submodule "DbConnector"]        path = DbConnector        url = https://github.com/chaconinc/DbConnector+       branch = stableSubmodule DbConnector c3f01dc..c87d55d:  > catch non-null terminated lines  > more robust error handling  > more efficient db routine  > better connection routineGit will by default try to update 
$ git checkout stableSwitched to branch stableLets try it with the merge option. To specify it manually, we can just add
$ git submodule update --remote --mergeremote: Counting objects: 4, done.remote: Compressing objects: 100% (2/2), done.remote: Total 4 (delta 2), reused 4 (delta 2)Unpacking objects: 100% (4/4), done.From https://github.com/chaconinc/DbConnector   c87d55d..92c7337  stable     -> origin/stableUpdating c87d55d..92c7337Fast-forward src/main.c | 1 + 1 file changed, 1 insertion(+)Submodule path DbConnector: merged in 92c7337b30ef9e0893e758dac2459d07362ab5eaSubmodules349
$ cd DbConnector/$ vim src/db.c$ git commit -am unicode support[stable f906e16] unicode support 1 file changed, 1 insertion(+)Now if we update our submodule we can see what happens when we have
$ git submodule update --remote --rebaseFirst, rewinding head to replay your work on top of it...Applying: unicode supportSubmodule path DbConnector: rebased into 5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94If you forget the 
$ git submodule update --remoteSubmodule path DbConnector: checked out 5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94If this happens, dont worry, you can simply go back into the directory and
$ git submodule update --remoteremote: Counting objects: 4, done.remote: Compressing objects: 100% (3/3), done.remote: Total 4 (delta 0), reused 4 (delta 0)Unpacking objects: 100% (4/4), done.From https://github.com/chaconinc/DbConnector   5d60ef9..c75e92a  stable     -> origin/stableerror: Your local changes to the following files would be overwritten by checkout: scripts/setup.sh
$ git submodule update --remote --mergeAuto-merging scripts/setup.shCONFLICT (content): Merge conflict in scripts/setup.shRecorded preimage for scripts/setup.shAutomatic merge failed; fix conflicts and then commit the result.Unable to merge c75e92a2b3855c9e5b66f915308390d9db204aca in submodule path DbConnectorYou can go into the submodule directory and fix the conflict just as you nor-
$ git diffSubmodule DbConnector c87d55d..82d2ad3:  > Merge from origin/stable  > updated setup script  > unicode support  > remove unnecessary method  > add new option for conn poolingIf we commit in the main project and push it up without pushing the sub-
$ git push --recurse-submodules=checkThe following submodule paths contain changes that cannot be found on any remote:  DbConnectorPlease try git push --recurse-submodules=on-demand
$ git push --recurse-submodules=on-demandPushing submodule DbConnectorCounting objects: 9, done.Delta compression using up to 8 threads.Compressing objects: 100% (8/8), done.Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.Total 9 (delta 3), reused 0 (delta 0)To https://github.com/chaconinc/DbConnector   c75e92a..82d2ad3  stable -> stableCounting objects: 2, done.Delta compression using up to 8 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, done.Total 2 (delta 1), reused 0 (delta 0)To https://github.com/chaconinc/MainProject   3d6d338..9a377d1  master -> masterAs you can see there, Git went into the DbConnector module and pushed it
this:$ git pullremote: Counting objects: 2, done.remote: Compressing objects: 100% (1/1), done.remote: Total 2 (delta 1), reused 2 (delta 1)Unpacking objects: 100% (2/2), done.From https://github.com/chaconinc/MainProject   9a377d1..eb974f8  master     -> origin/masterFetching submodule DbConnectorwarning: Failed to merge submodule DbConnector (merge following commits not found)Auto-merging DbConnectorCONFLICT (submodule): Merge conflict in DbConnectorAutomatic merge failed; fix conflicts and then commit the result.So basically what has happened here is that Git has figured out that the two
$ git diffdiff --cc DbConnectorindex eb41d76,c771610..0000000--- a/DbConnector+++ b/DbConnectorSo, in this case, 
$ cd DbConnector$ git rev-parse HEADeb41d764bccf88be77aced643c13a7fa86714135$ git branch try-merge c771610(DbConnector) $ git merge try-mergeAuto-merging src/main.cCONFLICT (content): Merge conflict in src/main.cRecorded preimage for src/main.cAutomatic merge failed; fix conflicts and then commit the result.We got an actual merge conflict here, so if we resolve that and commit it,
$ vim src/main.c $ git add src/main.c$ git commit -am merged our changesRecorded resolution for src/main.c.[master 9fd905e] merged our changes$ cd .. $ git diff diff --cc DbConnectorindex eb41d76,c771610..0000000--- a/DbConnector+++ b/DbConnector@@@ -1,1 -1,1 +1,1 @@@- Subproject commit eb41d764bccf88be77aced643c13a7fa86714135 -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a$ git add DbConnector CHAPTER 7: Git Tools
$ git commit -m "Merge Toms Changes" [master 10d2c60] Merge Toms ChangesFirst we resolve the conflict
this:$ git merge origin/masterwarning: Failed to merge submodule DbConnector (not fast-forward)Found a possible merge resolution for the submodule: 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > merged our changesIf this is correct simply add it to the index for exampleby using:  git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a "DbConnector"which will accept this suggestion.Auto-merging DbConnectorCONFLICT (submodule): Merge conflict in DbConnectorAutomatic merge failed; fix conflicts and then commit the result.What its suggesting that you do is to update the index like you had run 
$ cd DbConnector/$ git merge 9fd905eUpdating eb41d76..9fd905eFast-forward$ cd ..$ git add DbConnector$ git commit -am Fast forwarded to a common submodule childThis accomplishes the same thing, but at least this way you can verify that it
all our submodules.$ git submodule foreach git stashEntering CryptoLibraryNo local changes to saveEntering DbConnectorSaved working directory and index state WIP on stable: 82d2ad3 Merge from origin/stableHEAD is now at 82d2ad3 Merge from origin/stableThen we can create a new branch and switch to it in all our submodules.
$ git submodule foreach git checkout -b featureAEntering CryptoLibrarySwitched to a new branch featureAEntering DbConnectorSwitched to a new branch featureACHAPTER 7: Git Tools
$ git diff; git submodule foreach git diffSubmodule DbConnector contains modified contentdiff --git a/src/main.c b/src/main.cindex 210f1ae..1f0acdc 100644--- a/src/main.c+++ b/src/main.c@@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv)      commit_pager_choice();+     url = url_decode(url_orig);+      /* build alias_argv */      alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1));      alias_argv[0] = alias_string + 1;Entering DbConnectordiff --git a/src/db.c b/src/db.cindex 1aaefb6..5297645 100644--- a/src/db.c+++ b/src/db.c@@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len)        return url_decode_internal(&url, len, NULL, &out, 0); }+char *url_decode(const char *url)+{+       return url_decode_mem(url, strlen(url));+}+ char *url_decode_parameter_name(const char **query) {        struct strbuf out = STRBUF_INIT;Here we can see that were defining a function in a submodule and calling it
$ git config alias.sdiff !"git diff && git submodule foreach git diff"$ git config alias.spush push --recurse-submodules=on-demand$ git config alias.supdate submodule update --remote --mergeThis way you can simply run 
$ git checkout -b add-cryptoSwitched to a new branch add-crypto$ git submodule add https://github.com/chaconinc/CryptoLibraryCloning into CryptoLibrary......$ git commit -am adding crypto library[add-crypto 4445836] adding crypto library 2 files changed, 4 insertions(+) create mode 160000 CryptoLibrary$ git checkout masterwarning: unable to rmdir CryptoLibrary: Directory not emptySwitched to branch masterYour branch is up-to-date with origin/master.$ git statusOn branch masterYour branch is up-to-date with origin/master.Untracked files:  (use "git add <file>..." to include in what will be committed) CryptoLibrary/
$ git clean -fdxRemoving CryptoLibrary/$ git checkout add-cryptoSwitched to branch add-crypto$ ls CryptoLibrary/$ git submodule update --initSubmodule path CryptoLibrary: checked out b8dda6aa182ea4464f3f3264b11e0268545172af$ ls CryptoLibrary/Makefile includes scripts  src
$ rm -Rf CryptoLibrary/$ git submodule add https://github.com/chaconinc/CryptoLibraryCryptoLibrary already exists in the indexYou have to unstage the 
the submodule:$ git rm -r CryptoLibrary$ git submodule add https://github.com/chaconinc/CryptoLibraryCloning into CryptoLibrary...remote: Counting objects: 11, done.remote: Compressing objects: 100% (10/10), done.remote: Total 11 (delta 0), reused 11 (delta 0)Submodules359
$ git checkout mastererror: The following untracked working tree files would be overwritten by checkout:  CryptoLibrary/Makefile  CryptoLibrary/includes/crypto.h  ...Please move or remove them before you can switch branches.AbortingYou can force it to switch with 
mand.$ git checkout -f masterwarning: unable to rmdir CryptoLibrary: Directory not emptySwitched to branch masterThen, when you switch back, you get an empty 
mits:$ git logcommit 9a466c572fe88b195efd356c3f2bbeccdb504102Author: Scott Chacon <schacon@gmail.com>Date:   Wed Mar 10 07:34:10 2010 -0800    second commitcommit b1ec3248f39900d2a406049d762aa68e9641be25Author: Scott Chacon <schacon@gmail.com>Date:   Wed Mar 10 07:34:01 2010 -0800    first commitIf you want to send that repository to someone and you dont have access to
with git bundle create.$ git bundle create repo.bundle HEAD masterCounting objects: 6, done.Delta compression using up to 2 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (6/6), 441 bytes, done.Total 6 (delta 0), reused 0 (delta 0)Now you have a file named 
$ git clone repo.bundle repoCloning into repo......$ cd repo$ git log --oneline9a466c5 second commitb1ec324 first commitIf you dont include HEAD in the references, you have to also specify 
$ git log --oneline71b84da last commit - second repoc99cf5b fourth commit - second repo7011d3d third commit - second repo9a466c5 second commitb1ec324 first commitFirst we need to determine the range of commits we want to include in the
$ git log --oneline master ^origin/master71b84da last commit - second repoc99cf5b fourth commit - second repo7011d3d third commit - second repoSo now that we have the list of commits we want to include in the bundle,
$ git bundle create commits.bundle master ^9a466c5Counting objects: 11, done.Delta compression using up to 2 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (9/9), 775 bytes, done.Total 9 (delta 0), reused 0 (delta 0)Now we have a 
$ git bundle verify ../commits.bundleThe bundle contains 1 ref71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/masterThe bundle requires these 1 ref9a466c572fe88b195efd356c3f2bbeccdb504102 second commit../commits.bundle is okayIf the bundler had created a bundle of just the last two commits they had
$ git bundle verify ../commits-bad.bundleerror: Repository lacks these prerequisite commits:error: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 third commit - second repoBundling363
$ git bundle list-heads ../commits.bundle71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/masterThe verify sub-command will tell you the heads as well. The point is to see
$ git fetch ../commits.bundle master:other-masterFrom ../commits.bundle * [new branch]      master     -> other-masterNow we can see that we have the imported commits on the 
$ git log --oneline --decorate --graph --all* 8255d41 (HEAD, master) third commit - first repo| * 71b84da (other-master) last commit - second repo| * c99cf5b fourth commit - second repo| * 7011d3d third commit - second repo|/* 9a466c5 second commit* b1ec324 first commitSo, 
$ git log --onelineef989d8 fifth commitc6e1e95 fourth commit9c68fdc third commit945704c second commitc1822cf first commitWe want to break this up into two lines of history. One line goes from com-
$ git branch history c6e1e95$ git log --oneline --decorateef989d8 (HEAD, master) fifth commitc6e1e95 (history) fourth commit9c68fdc third commit945704c second commitc1822cf first commitCHAPTER 7: Git Tools
$ git remote add project-history https://github.com/schacon/project-history$ git push project-history history:masterCounting objects: 12, done.Delta compression using up to 2 threads.Compressing objects: 100% (4/4), done.Writing objects: 100% (12/12), 907 bytes, done.Total 12 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (12/12), done.To git@github.com:schacon/project-history.git * [new branch]      history -> masterReplace
$ git log --oneline --decorateef989d8 (HEAD, master) fifth commitc6e1e95 (history) fourth commit9c68fdc third commit945704c second commitc1822cf first commitIts useful in this case to create a base commit that has instructions on how
9c68fdc):$ git rebase --onto 622e88 9c68fdcFirst, rewinding head to replay your work on top of it...Applying: fourth commitApplying: fifth commitReplace
$ git clone https://github.com/schacon/project$ cd project$ git log --oneline mastere146b5f fifth commit81a708d fourth commit622e88e get history from blah blah blah$ git remote add project-history https://github.com/schacon/project-history$ git fetch project-historyCHAPTER 7: Git Tools
$ git log --oneline mastere146b5f fifth commit81a708d fourth commit622e88e get history from blah blah blah$ git log --oneline project-history/masterc6e1e95 fourth commit9c68fdc third commit945704c second commitc1822cf first commitTo combine them, you can simply call 
$ git replace 81a708d c6e1e95Now, if you look at the history of the 
this:$ git log --oneline mastere146b5f fifth commit81a708d fourth commit9c68fdc third commit945704c second commitc1822cf first commitCool, right? Without having to change all the SHA-1s upstream, we were able
$ git cat-file -p 81a708dtree 7bc544cf438903b65ca9104a1e30345eee6c083dparent 9c68fdceee073230f19ebb8b5e7fc71b479c0252author Scott Chacon <schacon@gmail.com> 1268712581 -0700committer Scott Chacon <schacon@gmail.com> 1268712581 -0700fourth commitRemember that the actual parent of 
$ git for-each-refe146b5f14e79d4935160c0e83fb9ebe526b8da0d commit refs/heads/masterc6e1e95051d41771a649f3145423f8809d1a74d4 commit refs/remotes/history/masterCHAPTER 7: Git Tools
$ git config --global credential.helper cacheSome of these helpers have options. The store helper can take a 
$ git config --global credential.helper store --file ~/.my-credentialsGit even allows you to configure several helpers. When looking for creden-
$ git credential fill protocol=https host=mygithostprotocol=https host=mygithostusername=bobpassword=s3cre7CHAPTER 7: Git Tools
$ git credential fill protocol=httpshost=unknownhostUsername for https://unknownhost: bobPassword for https://bob@unknownhost:protocol=httpshost=unknownhostusername=bobpassword=s3cre7This is the command line that initiates the interaction.
$ git credential-store --file ~/git.store store protocol=httpshost=mygithostusername=bobpassword=s3cre7$ git credential-store --file ~/git.store get protocol=httpshost=mygithostusername=bob password=s3cre7Here we tell 
$ git credential-read-only --file=/mnt/shared/creds getprotocol=httpshost=mygithostprotocol=httpshost=mygithostusername=bobpassword=s3cre7Since its name starts with git-, we can use the simple syntax for the config-
$ git config --global credential.helper read-only --file /mnt/shared/credsAs you can see, extending this system is pretty straightforward, and can
$ git config --global user.name "John Doe"$ git config --global user.email johndoe@example.comNow youll learn a few of the more interesting options that you can set in this
$ git config --global core.editor emacsNow, no matter what is set as your default shell editor, Git will fire up Emacs
$ git config --global commit.template ~/.gitmessage.txt$ git commitThen, your editor will open to something like this for your placeholder com-
$ git config --global core.pager Git Configuration
$ git config --global user.signingkey <gpg-key-id>Now, you can sign tags without having to specify your key every time with
$ git tag -s <tag-name>CORE.EXCLUDESFILEYou can put patterns in your projects 
$ git chekcout mastergit: chekcout is not a git command. See git --help.CHAPTER 8: Customizing Git
$ git chekcout masterWARNING: You called a Git command named chekcout, which does not exist.Continuing under the assumption that you meant checkoutin 0.1 seconds automatically...Note that 0.1 seconds business. 
$ git config --global color.ui falseThe default setting is 
$ git config --global color.diff.meta "blue black bold"You can set the color to any of the following values: 
$ git config --global merge.tool extMerge$ git config --global mergetool.extMerge.cmd \  extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"$ git config --global mergetool.extMerge.trustExitCode false$ git config --global diff.external extDiffor you can edit your 
$ git diff 32d1776b1^ 32d1776b1Instead of getting the 
$ git mergetool --tool-helpgit mergetool --tool=<tool> may be set to one of the following:        emerge        gvimdiff        gvimdiff2        opendiff        p4merge        vimdiff        vimdiff2The following tools are valid, but not currently available:        araxis        bc3        codecompare        deltawalker        diffmerge        diffuse        ecmerge        kdiff3        meld        tkdiff        tortoisemerge        xxdiffSome of the tools listed above only work in a windowedenvironment. If run in a terminal-only session, they will fail.If youre not interested in using 
$ git config --global merge.tool kdiff3If you run this instead of setting up the 
$ git config --global core.autocrlf trueIf youre on a Linux or Mac system that uses LF line endings, then you dont
$ git config --global core.autocrlf inputThis setup should leave you with CRLF endings in Windows checkouts, but
$ git config --global core.autocrlf falseCORE.WHITESPACEGit comes preset to detect and fix some whitespace issues. It can look for six
do this:$ git config --global core.whitespace \    trailing-space,space-before-tab,indent-with-non-tabGit will detect these issues when you run a 
$ git apply --whitespace=warn <patch>Or you can have Git try to automatically fix the issue before applying the
$ git apply --whitespace=fix <patch>Git Configuration
$ git config --system receive.fsckObjects trueNow, Git will check the integrity of your repository before each push is ac-
receive.denyNonFastForwards:$ git config --system receive.denyNonFastForwards trueThe other way you can do this is via server-side receive hooks, which well
$ git config --system receive.denyDeletes trueThis denies any deletion of branches or tags  no user can do it. To remove
$ git diffdiff --git a/chapter1.docx b/chapter1.docxindex 88839c4..4afcb7c 100644Binary files a/chapter1.docx and b/chapter1.docx differYou cant directly compare two versions unless you check them out and scan
$ git config diff.word.textconv docx2txtNow Git knows that if it tries to do a 
$ git diffdiff --git a/chapter1.docx b/chapter1.docxindex 0b013ca..ba25db5 100644--- a/chapter1.docx+++ b/chapter1.docx@@ -2,6 +2,7 @@ This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so. 1.1. About Version Control What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.+Testing: 1, 2, 3. If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead. 1.1.1. Local Version Control Systems Many peoples version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if theyre clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory youre in and accidentally write to the wrong file or copy over files you dont mean to.Git successfully and succinctly tells us that we added the string Testing: 1, 2,
$ git config diff.exif.textconv exiftoolIf you replace an image in your project and run 
$ rm test.txt$ git checkout -- test.txt$ cat test.txt$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $However, that result is of limited use. If youve used keyword substitution in
$ git config --global filter.indent.clean indent$ git config --global filter.indent.smudge catCHAPTER 8: Customizing Git
$ git config filter.dater.smudge expand_date$ git config filter.dater.clean perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"This Perl snippet strips out anything it sees in a 
$ git add date_test.txt .gitattributes$ git commit -m "Testing date expansion in Git"Git Attributes
$ rm date_test.txt$ git checkout date_test.txt$ cat date_test.txt# $Date: Tue Apr 21 07:26:52 2009 -0700$You can see how powerful this technique can be for customized applica-
$ echo Last commit date: $Format:%cd by %aN$ > LAST_COMMIT$ git add LAST_COMMIT .gitattributes$ git commit -am adding LAST_COMMIT file for archivesWhen you run 
this:$ git archive HEAD | tar xCf ../deployment-testing -$ cat ../deployment-testing/LAST_COMMITLast commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott ChaconThe substitutions can include for example the commit message and any git
$ echo $Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$ > LAST_COMMIT$ git commit -am export-subst uses git logs custom formattergit archive uses git logs pretty=format: processordirectly, and strips the surrounding $Format: and $markup from the output.$ git archive @ | tar xfO - LAST_COMMITLast commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700       export-subst uses git logs custom formatter         git archive uses git logs pretty=format: processor directly, and         strips the surrounding $Format: and $ markup from the output.The resulting archive is suitable for deployment work, but like any exported
$ git config --global merge.ours.driver trueIf you merge in the other branch, instead of having merge conflicts with the
$ git merge topicAuto-merging database.xmlMerge made by recursive.In this case, 
$ git rev-list 538c33..d14fc7d14fc7c847ab946ec39590d87783c69b031bdfb79f585da4401b0a3999e84113824d15245c13f0be234071a1be950e2a8d078e6141f5cd20c1e61ad3dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475You can take that output, loop through each of those commit SHA-1s, grab
$ git cat-file commit ca82a6tree cfda3bf379e4f8dba8717dee55aab78aef7f4dafparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7author Scott Chacon <schacon@gmail.com> 1205815931 -0700committer Scott Chacon <schacon@gmail.com> 1240030591 -0700changed the version numberA simple way to get the commit message from a commit when you have the
$ git cat-file commit ca82a6 | sed 1,/^$/dchanged the version numberYou can use that incantation to grab the commit message from each commit
):$ git log -1 --name-only --pretty=format: 9f585dREADMElib/test.rbIf you use the ACL structure returned from the 
$ git push -f origin masterCounting objects: 5, done.Compressing objects: 100% (3/3), done.Writing objects: 100% (3/3), 323 bytes, done.Total 3 (delta 1), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.Enforcing Policies...(refs/heads/master) (8338c5) (c5b616)[POLICY] Your message is not formatted correctlyerror: hooks/update exited with error code 1error: hook declined to update refs/heads/masterTo git@gitserver:project.git ! [remote rejected] master -> master (hook declined)error: failed to push some refs to git@gitserver:project.gitThere are a couple of interesting things here. First, you see this where the
$ git commit -am test[POLICY] Your message is not formatted correctlyNo commit was completed in that instance. However, if your message con-
$ git commit -am test [ref: 132][master e05c914] test [ref: 132] 1 file changed, 1 insertions(+), 0 deletions(-)Next, you want to make sure you arent modifying files that are outside your
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tagsInitialized empty Git repository in /private/tmp/progit/test-svn/.git/r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)    A m4/acx_pthread.m4
$ git svn clone file:///tmp/test-svn -sAt this point, you should have a valid Git repository that has imported your
$ git branch -a* master  remotes/origin/my-calc-branch  remotes/origin/tags/2.0.2  remotes/origin/tags/release-2.0.1  remotes/origin/tags/release-2.0.2  remotes/origin/tags/release-2.0.2rc1  remotes/origin/trunkNote how this tool manages Subversion tags as remote refs. Lets take a clos-
$ git show-ref556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branchbfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunkGit doesnt do this when it clones from a Git server; heres what a repository
$ git show-refc3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-175f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-223f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.07064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.06dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0Git fetches the tags directly into 
$ git commit -am Adding git-svn instructions to the README[master 4af61fd] Adding git-svn instructions to the README 1 file changed, 5 insertions(+)Next, you need to push your change upstream. Notice how this changes the
$ git svn dcommitCommitting to file:///tmp/test-svn/trunk ...    M README.txt
$ git log -1commit 95e0222ba6399739834380eb10afcd73e0670bc5Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>Date:   Thu Jul 24 03:08:36 2014 +0000    Adding git-svn instructions to the README    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68Notice that the SHA-1 checksum that originally started with 
this:$ git svn dcommitCommitting to file:///tmp/test-svn/trunk ...ERROR from SVN:Transaction is out of date: File /trunk/README.txt is out of dateW: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase::100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M README.txt
$ git svn rebaseCommitting to file:///tmp/test-svn/trunk ...ERROR from SVN:Transaction is out of date: File /trunk/README.txt is out of dateW: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase::100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M README.txt
dcommit:$ git svn dcommitCommitting to file:///tmp/test-svn/trunk ...    M README.txt
$ git svn dcommitCommitting to file:///tmp/test-svn/trunk ...    M configure.ac
$ git svn rebase    M autogen.sh
$ git svn dcommitCommitting to file:///tmp/test-svn/trunk ...    M CHANGES.txt
$ git svn branch operaCopying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0Following parent with do_switchSuccessfully followed parentr91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)This does the equivalent of the 
$ git branch opera remotes/origin/operaNow, if you want to merge your 
$ git svn log------------------------------------------------------------------------r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 linesautogen change------------------------------------------------------------------------r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 linesMerge branch experiment------------------------------------------------------------------------r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 linesupdated the changelogYou should know two important things about 
$ git svn blame README.txt 2   temporal Protocol Buffers - Googles data interchange format 2   temporal Copyright 2008 Google Inc. 2   temporal http://code.google.com/apis/protocolbuffers/ 2   temporal22   temporal C++ Installation - Unix22   temporal ======================= 2   temporal79    schacon Committing in git-svn.78    schacon 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol 2   temporal Buffer compiler (protoc) execute the following: 2   temporalAgain, it doesnt show commits that you did locally in Git or that have been
running git svn info:$ git svn infoPath: .URL: https://schacon-test.googlecode.com/svn/trunkRepository Root: https://schacon-test.googlecode.com/svnRepository UUID: 4c93b258-373f-11de-be05-5f7a86268029Revision: 87Node Kind: directorySchedule: normalLast Changed Author: schaconLast Changed Rev: 87Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)This is like 
$ git svn show-ignore > .git/info/excludeThat way, you dont litter the project with 
$ git clone hg::/tmp/hello /tmp/hello-git$ cd /tmp/hello-git$ git log --oneline --graph --decorateCHAPTER 9: Git and Other Systems
$ cat notes/hgd4c10386...$ git cat-file -p d4c10386...tree 1781c96...author remote-hg <> 1408066400 -0800committer remote-hg <> 1408066400 -0800Notes for master$ git ls-tree 1781c96...100644 blob ac9117f... 65bb417...
$ git cat-file -p ac9117f0a04b987be5ae354b710cefeba0e2d9de7ad41a9So refs/notes/hg points to a tree, which in the Git object database is a list
$ git log --oneline --graph --decorate* ba04a2a (HEAD, master) Update makefile* d25d16f Goodbye* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile* 65bb417 Create a standard "hello, world" programOur master branch is two commits ahead of 
$ git fetchFrom hg::/tmp/hello   ac7955c..df85e87  master     -> origin/master   ac7955c..df85e87  branches/default -> origin/branches/default$ git log --oneline --graph --decorate --all* 7b07969 (refs/notes/hg) Notes for default* d4c1038 Notes for master* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation| * ba04a2a (HEAD, master) Update makefile| * d25d16f Goodbye|/* ac7955c Create a makefile* 65bb417 Create a standard "hello, world" programSince we used the 
$ git merge origin/masterAuto-merging hello.cMerge made by the recursive strategy. hello.c | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)$ git log --oneline --graph --decorate*   0c64627 (HEAD, master) Merge remote-tracking branch origin/master|\| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation* | ba04a2a Update makefile* | d25d16f Goodbye|/* ac7955c Create a makefile* 65bb417 Create a standard "hello, world" programGit as a Client433
$ git pushTo hg::/tmp/hello   df85e87..0c64627  master -> masterThats it! If you take a look at the Mercurial repository, youll see that this did
side:$ git checkout -b featureASwitched to a new branch featureA$ git push origin featureATo hg::/tmp/hello * [new branch]      featureA -> featureAThats all there is to it. On the Mercurial side, it looks like this:
$ git checkout -b branches/permanentSwitched to a new branch branches/permanent$ vi Makefile$ git commit -am A permanent change$ git push origin branches/permanentTo hg::/tmp/hello * [new branch]      branches/permanent -> branches/permanentHeres what that looks like on the Mercurial side:
$ git clone https://10.0.1.254/TalkhouseCloning into Talkhouse...Username for https://10.0.1.254: johnPassword for https://john@10.0.1.254:remote: Counting objects: 630, done.remote: Compressing objects: 100% (581/581), done.remote: Total 630 (delta 172), reused 0 (delta 0)Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.Resolving deltas: 100% (172/172), done.Checking connectivity... done.The virtual-machine image comes equipped with a sample project that you
$ git clone https://10.0.1.254/JamCloning into Jam...Username for https://10.0.1.254: johnPassword for https://ben@10.0.1.254:remote: Counting objects: 2070, done.remote: Compressing objects: 100% (1704/1704), done.Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.remote: Total 2070 (delta 1242), reused 0 (delta 0)Resolving deltas: 100% (1242/1242), done.Checking connectivity... done.$ git branch -a* master  remotes/origin/HEAD -> origin/master  remotes/origin/master  remotes/origin/rel2.1$ git log --oneline --decorate --graph --all* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.| * bd2f54a Put in fix for jams NT handle leak.| * c0f29e7 Fix URL in a jam doc| * cc644ac Radstones lynx port.[...]The first time you do this, it may take some time. Whats happening is that
# ...$ git log --oneline --decorate --graph --all* cfd46ab (HEAD, master) Add documentation for new feature* a730d77 Whitespace* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.Git as a Client443
$ git fetchremote: Counting objects: 5, done.remote: Compressing objects: 100% (3/3), done.remote: Total 3 (delta 2), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From https://10.0.1.254/Jam   d254865..6afeb15  master     -> origin/master$ git log --oneline --decorate --graph --all* 6afeb15 (origin/master, origin/HEAD) Update copyright| * cfd46ab (HEAD, master) Add documentation for new feature| * a730d77 Whitespace|/* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.* bd2f54a Put in fix for jams NT handle leak.[...]It looks like someone was! You wouldnt know it from this view, but the
$ git merge origin/masterAuto-merging READMEMerge made by the recursive strategy. README | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)$ git pushCounting objects: 9, done.Delta compression using up to 8 threads.Compressing objects: 100% (9/9), done.Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.Total 9 (delta 6), reused 0 (delta 0)remote: Perforce: 100% (3/3) Loading commit tree into memory...remote: Perforce: 100% (5/5) Finding child commits...remote: Perforce: Running git fast-export...remote: Perforce: 100% (3/3) Checking commits...remote: Processing will continue even if connection is closed.remote: Perforce: 100% (3/3) Copying changelists...remote: Perforce: Submitting new Git commit objects to Perforce: 4CHAPTER 9: Git and Other Systems
$ git p4 clone //depot/www/live www-shallowImporting from //depot/www/live into www-shallowCHAPTER 9: Git and Other Systems
$ cd myproject$ git log --oneline --all --graph --decorate* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #headNote how theres a p4 remote for the Perforce server, but everything else
$ git remote -vNo remotes exist in this repository at all. Git-p4 has created some refs to rep-
$ git log --oneline --all --graph --decorate* 018467c (HEAD, master) Change page title* c0fb617 Update link* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #headWeve made two new commits that were ready to submit to the Perforce
$ git p4 syncgit p4 syncPerforming incremental import into refs/remotes/p4/master git branchDepot paths: //depot/www/live/Import destination: refs/remotes/p4/masterImporting revision 12142 (100%)$ git log --oneline --all --graph --decorateGit as a Client447
$ git p4 rebasePerforming incremental import into refs/remotes/p4/master git branchDepot paths: //depot/www/live/No changes to import!Rebasing the current branch onto remotes/p4/masterFirst, rewinding head to replay your work on top of it...Applying: Update linkApplying: Change page title index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)You can probably tell from the output, but 
$ git p4 submitPerforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/Synchronizing p4 checkout...... - file(s) up-to-date.Applying dbac45b Update link//depot/www/live/index.html#4 - opened for editChange 12143 created with 1 open file(s).Submitting change 12143.Locking 1 files ...edit //depot/www/live/index.html#5Change 12143 submitted.Applying 905ec6a Change page title//depot/www/live/index.html#5 - opened for editChange 12144 created with 1 open file(s).Submitting change 12144.Locking 1 files ...edit //depot/www/live/index.html#6Change 12144 submitted.All commits applied!Performing incremental import into refs/remotes/p4/master git branchDepot paths: //depot/www/live/Import destination: refs/remotes/p4/masterImporting revision 12144 (100%)Rebasing the current branch onto remotes/p4/masterFirst, rewinding head to replay your work on top of it...$ git log --oneline --all --graph --decorate* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title* 05f1ade Update link* 75cd059 Update copyright* 70eaf78 Initial import of //depot/www/live/ from the state at revision #headThe result is as though we just did a 
$ git log -1commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145Author: John Doe <john@example.com>Date:   Sun Aug 31 10:31:44 2014 -0800    Change page titleCHAPTER 9: Git and Other Systems
$ git log --oneline --all --graph --decorate* 3be6fd8 (HEAD, master) Correct email address*   1dcbf21 Merge remote-tracking branch p4/master|\| * c4689fc (p4/master, p4/HEAD) Grammar fix* | cbacd0a Table borders: yes please* | b4959b6 Trademark|/* 775a46f Change page title* 05f1ade Update link* 75cd059 Update copyright* 70eaf78 Initial import of //depot/www/live/ from the state at revision #headThe Git and Perforce history diverge 
$ git p4 submit -nPerforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/Would apply  b4959b6 Trademark  cbacd0a Table borders: yes please  3be6fd8 Correct email addressThe -n flag is short for 
$ git p4 submit[]$ git log --oneline --all --graph --decorate* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address* 1b79a80 Table borders: yes pleaseGit as a Client451
$ git p4 clone --detect-branches //depot/project@allImporting from //depot/project@all into projectInitialized empty Git repository in /private/tmp/project/.git/Importing revision 20 (50%)    Importing new branch project/dev    Resuming with change 20Importing revision 22 (100%)Updated branches: main dev$ cd project; git log --oneline --all --graph --decorate* eae77ae (HEAD, p4/master, p4/HEAD, master) main| * 10d55fb (p4/project/dev) dev| * a43cfae Populate //depot/project/main/... //depot/project/dev/....|/* 2b83451 Project initCHAPTER 9: Git and Other Systems
$ git init projectInitialized empty Git repository in /tmp/project/.git/$ cd project$ git config git-p4.branchList main:dev$ git clone --detect-branches //depot/project@all .Setting the 
git-tf:$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_gitThe first argument is the URL of a TFVC collection, the second is of the form
$ cd project_git$ git log --all --oneline --decorate512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin messageThis is called a 
--deep option:$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \  project_git --deepUsername: domain\userPassword:Connecting to TFS...Cloning $/myproject into /tmp/project_git: 100%, done.Cloned 4 changesets. Cloned last changeset 35190 as d44b17a$ cd project_git$ git log --all --oneline --decorated44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye126aa7b (tag: TFS_C35189)8f77431 (tag: TFS_C35178) FIRSTGit as a Client455
$ git config set --local core.ignorecase=true$ git config set --local core.autocrlf=falseThe obvious next thing youre going to want to do is work on the project.
$ git log --oneline --graph --decorate --all* 4178a82 (HEAD, master) update code* 9df2ae3 update readme* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye* 126aa7b (tag: TFS_C35189)* 8f77431 (tag: TFS_C35178) FIRST* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \          Team Project Creation WizardWe want to take the snapshot thats in the 
$ git tf fetchUsername: domain\userPassword:Connecting to TFS...Fetching $/myproject at latest changeset: 100%, done.Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.$ git log --oneline --graph --decorate --all* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text| * 4178a82 (HEAD, master) update code| * 9df2ae3 update readme|/* d44b17a (tag: TFS_C35190) Goodbye* 126aa7b (tag: TFS_C35189)* 8f77431 (tag: TFS_C35178) FIRST* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \          Team Project Creation WizardLooks like someone else is working, too, and now we have divergent history.
$ git rebase FETCH_HEADFirst, rewinding head to replay your work on top of it...Applying: update readmeApplying: update code$ git log --oneline --graph --decorate --all* 5a0e25e (HEAD, master) update code* 6eb3eb5 update readme* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text* d44b17a (tag: TFS_C35190) Goodbye* 126aa7b (tag: TFS_C35189)* 8f77431 (tag: TFS_C35178) FIRST* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \          Team Project Creation WizardNow were ready to make a checkin to the TFVC server. Git-tf gives you the
$ git tf checkin -m Updating readme and codeUsername: domain\userPassword:Connecting to TFS...Checking in to $/myproject: 100%, done.Checked commit 5a0e25e in as changeset 35348$ git log --oneline --graph --decorate --all* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code* 6eb3eb5 update readme* 8ef06a8 (tag: TFS_C35320) just some text* d44b17a (tag: TFS_C35190) Goodbye* 126aa7b (tag: TFS_C35189)* 8f77431 (tag: TFS_C35178) FIRST* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \          Team Project Creation WizardGit as a Client459
$ git svn clone http://my-project.googlecode.com/svn/ \      --authors-file=users.txt --no-metadata -s my_projectNow you should have a nicer Subversion import in your 
$ git branch -d trunkThe last thing to do is add your new Git server as a remote and push to it.
$ git remote add origin git@my-git-server:myrepository.gitBecause you want all your branches and tags to go up, you can now run this:
$ git push origin --all$ git push origin --tagsAll your branches and tags should be on your new Git server in a nice, clean
$ git clone http://repo.or.cz/r/fast-export.git /tmp/fast-exportCHAPTER 9: Git and Other Systems
$ git init /tmp/converted$ cd /tmp/converted$ /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authorsMigrating to Git
$ /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authorsLoaded 4 authorsmaster: Exporting full revision 1/22208 with 13/0/0 added/changed/removed filesmaster: Exporting simple delta revision 2/22208 with 1/1/0 added/changed/removed filesmaster: Exporting simple delta revision 3/22208 with 0/1/0 added/changed/removed files[]master: Exporting simple delta revision 22206/22208 with 0/4/0 added/changed/removed filesmaster: Exporting simple delta revision 22207/22208 with 0/2/0 added/changed/removed filesmaster: Exporting thorough delta revision 22208/22208 with 3/213/0 added/changed/removed filesExporting tag [0.4c] at [hg r9] [git :10]Exporting tag [0.4d] at [hg r16] [git :17][]Exporting tag [3.1-rc] at [hg r21926] [git :21927]Exporting tag [3.1] at [hg r21973] [git :21974]Issued 22315 commandsgit-fast-import statistics:---------------------------------------------------------------------Allocd objects:     120000Total objects:       115032 (    208171 duplicates                  )      blobs  :        40504 (    205320 duplicates      26117 deltas of      39602 attempts)      trees  :        52320 (      2851 duplicates      47467 deltas of      47599 attempts)      commits:        22208 (         0 duplicates          0 deltas of          0 attempts)      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)Total branches:         109 (         2 loads     )      marks:        1048576 (     22208 unique    )      atoms:           1952Memory total:          7860 KiB       pools:          2235 KiB     objects:          5625 KiB---------------------------------------------------------------------pack_report: getpagesize()            =       4096pack_report: core.packedGitWindowSize = 1073741824pack_report: core.packedGitLimit      = 8589934592pack_report: pack_used_ctr            =      90430pack_report: pack_mmap_calls          =      46771pack_report: pack_open_windows        =          1 /          1pack_report: pack_mapped              =  340852700 /  340852700---------------------------------------------------------------------$ git shortlog -snCHAPTER 9: Git and Other Systems
side home:$ git remote add origin git@my-git-server:myrepository.git$ git push origin --allPerforce
$ git log -2commit e5da1c909e5db3036475419f6379f2c73710c4e6Author: giles <giles@giles@perforce.com>Date:   Wed Feb 8 03:13:27 2012 -0800    Correction to line 355; change </UL> to </OL>.    [git-p4: depot-paths = "//public/jam/src/": change = 8068]commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98Author: kwirth <kwirth@perforce.com>Date:   Tue Jul 7 01:35:51 2009 -0800    Fix spelling error on Jam doc page (cummulative -> cumulative).    [git-p4: depot-paths = "//public/jam/src/": change = 7304]You can see that 
$ git filter-branch --msg-filter sed -e "/^\[git-p4:/d"Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)Ref refs/heads/master was rewrittenCHAPTER 9: Git and Other Systems
es:$ git log -2commit b17341801ed838d97f7800a54a6f9b95750839b7Author: giles <giles@giles@perforce.com>Date:   Wed Feb 8 03:13:27 2012 -0800    Correction to line 355; change </UL> to </OL>.commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fffAuthor: kwirth <kwirth@perforce.com>Date:   Tue Jul 7 01:35:51 2009 -0800    Fix spelling error on Jam doc page (cummulative -> cumulative).Your import is ready to push up to your new Git server.
$ git initInitialized empty Git repository in /opt/import_to/.git/$ ruby import.rb /opt/import_from | git fast-importgit-fast-import statistics:---------------------------------------------------------------------Allocd objects:       5000Total objects:           13 (         6 duplicates                  )      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)      commits:            4 (         1 duplicates          0 deltas of          0 attempts)      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)Total branches:           1 (         1 loads     )CHAPTER 9: Git and Other Systems
$ git log -2commit 3caa046d4aac682a55867132ccdfbe0d3fdee498Author: John Doe <john@example.com>Date:   Tue Jul 29 19:39:04 2014 -0700    imported from currentcommit 4afc2b945d0d3c8cd00556fbe2e8224569dc9defAuthor: John Doe <john@example.com>Date:   Mon Feb 3 01:00:00 2014 -0700    imported from back_2014_02_03There you go  a nice, clean Git repository. Its important to note that noth-
$ ls$ git reset --hard masterHEAD is now at 3caa046 imported from current$ lsREADME.md main.rbYou can do a lot more with the 
$ git init testInitialized empty Git repository in /tmp/test/.git/$ cd test$ find .git/objects.git/objects.git/objects/info.git/objects/pack$ find .git/objects -type fGit has initialized the 
$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4test contentNow, you can add content to Git and pull it back out again. You can also do
$ echo version 1 > test.txt$ git hash-object -w test.txt83baae61804e65cc73a7201a7252750c76066a30Then, write some new content to the file, and save it again:
$ echo version 2 > test.txt$ git hash-object -w test.txt1f7a7a472abf3dd9643fd615f6da379c4acb3e3aYour database contains the two new versions of the file as well as the first
$ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt$ cat test.txtversion 1or the second version:
$ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt$ cat test.txtversion 2But remembering the SHA-1 key for each version of your file isnt practical;
cat-file -t:$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3ablobTree Objects
this:$ git cat-file -p master^{tree}100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      libThe master^{tree} syntax specifies the tree object that is pointed to by
$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rbConceptually, the data that Git is storing is something like this:
$ git update-index --add --cacheinfo 100644 \  83baae61804e65cc73a7201a7252750c76066a30 test.txtIn this case, youre specifying a mode of 
$ git write-treed8329fc1cc938780ffdd9f94e0d364e0ea74f579$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txtYou can also verify that this is a tree object:
$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579treeYoull now create a new tree with the second version of 
$ echo new file > new.txt$ git update-index test.txt$ git update-index --add new.txtYour staging area now has the new version of 
$ git write-tree0155eb4229851634a0f03eb265b69f5a2d56f341$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txtNotice that this tree has both file entries and also that the 
read-tree:$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579$ git write-tree3c4e9cd789d88d8d89c1073707c3585e41b0e614Git Objects487
$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txtIf you created a working directory from the new tree you just wrote, you
cat-file:$ git cat-file -p fdf4fc3tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579author Scott Chacon <schacon@gmail.com> 1243040974 -0700committer Scott Chacon <schacon@gmail.com> 1243040974 -0700first commitThe format for a commit object is simple: it specifies the top-level tree for
$ git log --stat 1a410ecommit 1a410efbd13591db07496601ebc7a059dd55cfe9Author: Scott Chacon <schacon@gmail.com>Date:   Fri May 22 18:15:24 2009 -0700 third commit
$ git log --pretty=oneline master1a410efbd13591db07496601ebc7a059dd55cfe9 third commitcac0cab538b970a37ea1e769cbbde608743bc96d second commitfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commitYou arent encouraged to directly edit the reference files. Git provides a safer
update-ref:$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9Git References
do this:$ git update-ref refs/heads/test cac0caYour branch will contain only work from that commit down:
$ git log --pretty=oneline testcac0cab538b970a37ea1e769cbbde608743bc96d second commitfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commitNow, your Git database conceptually looks something like this:
$ git symbolic-ref HEADrefs/heads/masterYou can also set the value of HEAD:
$ git symbolic-ref HEAD refs/heads/test$ cat .git/HEADref: refs/heads/testYou cant set a symbolic reference outside of the refs style:
$ git symbolic-ref HEAD testfatal: Refusing to point HEAD outside of refs/Tags
$ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96dThat is all a lightweight tag is  a reference that never moves. An annotated
$ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m test tagHeres the object SHA-1 value it created:
$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2object 1a410efbd13591db07496601ebc7a059dd55cfe9type committag v1.1tagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700test tagNotice that the object entry points to the commit SHA-1 value that you tag-
$ git cat-file blob junio-gpg-pubThe Linux kernel repository also has a non-commit-pointing tag object  the
$ git remote add origin git@github.com:schacon/simplegit-progit.git$ git push origin masterCounting objects: 11, done.Compressing objects: 100% (5/5), done.Writing objects: 100% (7/7), 716 bytes, done.Total 7 (delta 2), reused 4 (delta 1)To git@github.com:schacon/simplegit-progit.git  a11bef0..ca82a6d  master -> masterThen, you can see what the 
$ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb$ git add repo.rb$ git commit -m added repo.rb[master 484a592] added repo.rb 3 files changed, 709 insertions(+), 2 deletions(-) delete mode 100644 bak/test.txt create mode 100644 repo.rb rewrite test.txt (100%)If you look at the resulting tree, you can see the SHA-1 value your repo.rb file
$ git cat-file -p master^{tree}100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5      repo.rb100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txtYou can then use 
$ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d522044Now, modify that file a little, and see what happens:
$ echo # testing >> repo.rb$ git commit -am modified repo a bit[master 2431da6] modified repo.rb a bit 1 file changed, 1 insertion(+)CHAPTER 10: Git Internals
$ git cat-file -p master^{tree}100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt100644 blob b042a60ef7dff760008df33cee372b945b6e884e      repo.rb100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txtThe blob is now a 
$ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e22054You have two nearly identical 22K objects on your disk. Wouldnt it be nice if
$ git gcCounting objects: 18, done.Delta compression using up to 8 threads.Compressing objects: 100% (14/14), done.Writing objects: 100% (18/18), done.Total 18 (delta 3), reused 0 (delta 0)If you look in your objects directory, youll find that most of your objects are
$ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 1269bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 16780d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 31943168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756d368d0ac0678cbe6cce505be58126d3526706e54 tag    130 122 874fe879577cb8cffcdf25441725141e310dd7d239b tree   136 136 996d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 1132deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree   136 136 1178d982c7cb2c2a972ee391a85da481fc1f9127a01d tree   6 17 1314 1 \  deef2e1b793907545e50a2ea2ddb5ba6c58c45063c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   8 19 1331 1 \  deef2e1b793907545e50a2ea2ddb5ba6c58c45060155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 135083baae61804e65cc73a7201a7252750c76066a30 blob   10 19 1426fa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 1445b042a60ef7dff760008df33cee372b945b6e884e blob   22054 5799 1463033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   9 20 7262 1 \  b042a60ef7dff760008df33cee372b945b6e884e1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 7282non delta: 15 objectschain length = 1: 3 objects.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: okHere, the 
this:$ git remote add origin https://github.com/schacon/simplegit-progitIt adds a section to your 
$ git log origin/master$ git log remotes/origin/master$ git log refs/remotes/origin/masterTheyre all equivalent, because Git expands each of them to 
$ git fetch origin master:refs/remotes/origin/mymasterYou can also specify multiple refspecs. On the command line, you can pull
$ git fetch origin master:refs/remotes/origin/mymaster \  topic:refs/remotes/origin/topic
$ git push origin master:refs/heads/qa/masterIf they want Git to do that automatically each time they run 
$ git push origin :topicBecause the refspec is 
$ git clone http://server/simplegit-progit.gitThe first thing this command does is pull down the 
$ git cat-file -p ca82a6dff817ec66f44342007202690a93763949tree cfda3bf379e4f8dba8717dee55aab78aef7f4dafparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7author Scott Chacon <schacon@gmail.com> 1205815931 -0700committer Scott Chacon <schacon@gmail.com> 1240030591 -0700changed the version numberNext, you have two more objects to retrieve  
$ git gc --autoAgain, this generally does nothing. You must have around 7,000 loose ob-
$ git log --pretty=onelineab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit484a59275031909e19aadb7c92262719cfcdf19a added repo.rb1a410efbd13591db07496601ebc7a059dd55cfe9 third commitcac0cab538b970a37ea1e769cbbde608743bc96d second commitfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commitNow, move the 
$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9HEAD is now at 1a410ef third commit$ git log --pretty=oneline1a410efbd13591db07496601ebc7a059dd55cfe9 third commitcac0cab538b970a37ea1e769cbbde608743bc96d second commitfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commitMaintenance and Data Recovery
git reflog:$ git reflog1a410ef HEAD@{0}: reset: moving to 1a410efab1afef HEAD@{1}: commit: modified repo.rb a bit484a592 HEAD@{2}: commit: added repo.rbHere we can see the two commits that we have had checked out, however
$ git log -gcommit 1a410efbd13591db07496601ebc7a059dd55cfe9Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)Reflog message: updating HEADAuthor: Scott Chacon <schacon@gmail.com>Date:   Fri May 22 18:22:37 2009 -0700  third commit
$ git branch recover-branch ab1afef$ git log --pretty=oneline recover-branchab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit484a59275031909e19aadb7c92262719cfcdf19a added repo.rb1a410efbd13591db07496601ebc7a059dd55cfe9 third commitcac0cab538b970a37ea1e769cbbde608743bc96d second commitfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commitCool  now you have a branch named 
$ git branch -D recover-branch$ rm -Rf .git/logs/Because the reflog data is kept in the 
$ git fsck --fullChecking object directories: 100% (256/256), done.Checking objects: 100% (18/18), done.dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24bdangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293In this case, you can see your missing commit 
$ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz$ git add git.tgz$ git commit -m add git tarball[master 7b30847] add git tarball 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 git.tgzOops  you didnt want to add a huge tarball to your project. Better get rid of
$ git rm git.tgzrm git.tgz$ git commit -m oops - removed large tarball[master dadf725] oops - removed large tarball 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 git.tgzNow, 
$ git gcCounting objects: 17, done.Delta compression using up to 8 threads.Compressing objects: 100% (13/13), done.CHAPTER 10: Git Internals
$ git count-objects -vcount: 7size: 32in-pack: 17packs: 1size-pack: 4868prune-packable: 0garbage: 0size-garbage: 0The size-pack entry is the size of your packfiles in kilobytes, so youre us-
$ git verify-pack -v .git/objects/pack/pack-2969.idx \  | sort -k 3 -n \  | tail -3dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   22044 5792 497769682c99a3e86bb1267b236a4b6eff7868d97489af1 blob   4975916 4976258 1438The big object is at the bottom: 5MB. To find out what file it is, youll use the
$ git rev-list --objects --all | grep 82c99a382c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgzNow, you need to remove this file from all trees in your past. You can easily
$ git log --oneline --branches -- git.tgzdadf725 oops - removed large tarball7b30847 add git tarballYou must rewrite all the commits downstream from 
:$ git filter-branch --index-filter \  git rm --ignore-unmatch --cached git.tgz -- 7b30847^..Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm git.tgzRewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)Ref refs/heads/master was rewrittenThe --index-filter option is similar to the 
$ rm -Rf .git/refs/original$ rm -Rf .git/logs/$ git gcCounting objects: 15, done.Delta compression using up to 8 threads.Compressing objects: 100% (11/11), done.Writing objects: 100% (15/15), done.Total 15 (delta 1), reused 12 (delta 0)Lets see how much space you saved.
$ git count-objects -vcount: 11size: 4904in-pack: 15packs: 1size-pack: 8prune-packable: 0garbage: 0size-garbage: 0The packed repository size is down to 8K, which is much better than 5MB.
git prune with the --expire option:$ git prune --expire now$ git count-objects -vcount: 0size: 0in-pack: 15packs: 1size-pack: 8prune-packable: 0garbage: 0size-garbage: 0Environment VariablesGit always runs inside a 
$ GIT_REFLOG_ACTION="my action" git commit --allow-empty -m my message[master 9e3d55a] my message$ git reflog -19e3d55a HEAD@{0}: my action: my messageSummaryYou should have a pretty good understanding of what Git does in the back-
The git-gui committool.$ git guiAnd it looks something like this:
$ git chec<tab>Appendix A, Git in Other Environments
$ git che<tab>check-attr        -- display gitattributes informationcheck-ref-format  -- ensure that a reference name is well formedcheckout          -- checkout branch or paths to working treecheckout-index    -- copy files from index to working directorycherry            -- find commits not merged upstreamcherry-pick       -- apply changes introduced by some existing commitsAmbiguous tab-completions arent just listed; they have helpful descrip-
